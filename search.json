[{"path":"https://docs.ropensci.org/tidyqpcr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidyqpcr","title":"Contributing to tidyqpcr","text":"outlines propose change tidyqpcr.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tidyqpcr","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to tidyqpcr","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to tidyqpcr","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"{{github_spec}}\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to tidyqpcr","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tidyqpcr","text":"Please note tidyqpcr package released Contributor Code Conduct rOpensci. contributing project, agree abide terms. contributing guide adapted tidyverse contributing guide available https://raw.githubusercontent.com/r-lib/usethis/master/inst/templates/tidy-contributing.md","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/LICENSE.html","id":"1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/LICENSE.html","id":"2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/LICENSE.html","id":"3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/LICENSE.html","id":"4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/LICENSE.html","id":"5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/LICENSE.html","id":"6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/LICENSE.html","id":"7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/LICENSE.html","id":"8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/LICENSE.html","id":"9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"summary-calibrating-primer-sets-from-a-real-experimental-test","dir":"Articles","previous_headings":"","what":"Summary: calibrating primer sets from a real experimental test","title":"Primers and probes calibration vignette","text":"vignette shows use tidyqpcr functions calibrate qPCR probes. real qPCR data Edward Wallace Feb 2019, testing new RT-qPCR primer sets S. cerevisiae genes. took exponential-phase total RNA previously extracted Jamie Auxillos. tested 2-3 primer sets 7 genes: ECM38/YLR299W (3 primer sets) FET5/YFL041W (3 primer sets) GPT2/YKR067W ILV5/YLR355C NRD1/YNL251C RDL1/YOR285W TFS1/YLR178C started two biological replicate RNA samples, treated DNase split test sample reverse transcriptase (RT) negative control without reverse transcriptase (-RT). also took template (NT) negative control. RT reaction serial 5x dilutions 125x form quantitative calibration curve. data measured Roche LC480 instrument single 384-well plate. Quantification performed Roche LightCycler software prior exporting data.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"setup-knitr-options-and-load-packages","dir":"Articles","previous_headings":"Summary: calibrating primer sets from a real experimental test","what":"Setup knitr options and load packages","title":"Primers and probes calibration vignette","text":"","code":"# knitr options for report generation knitr::opts_chunk$set(   warning = FALSE, message = FALSE, echo = TRUE, cache = FALSE,   results = \"show\" )  # Load packages library(tidyr) library(ggplot2) library(dplyr) library(tidyqpcr)  # set default theme for graphics theme_set(theme_bw(base_size = 11) %+replace%   theme(     strip.background = element_blank(),     panel.grid = element_blank()   ))"},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"describe-which-primer-set-we-put-in-which-well-using-a-row-key","dir":"Articles","previous_headings":"Set up experiment","what":"Describe which primer set we put in which well using a row key","title":"Primers and probes calibration vignette","text":"experiment, primer set different row 384-well plate. describe creating row key, data frame describing rows plate, primer sets, genes detect. refer primer set target_id, primer set different target amplicon, different location gene. tidyqpcr insists variable called target_id uniquely identifies different target detect.","code":"# Names of target genes gene_name_levels <- c(\"ECM38\", \"FET5\", \"GPT2\", \"ILV5\", \"NRD1\", \"RDL1\", \"TFS1\") # ORF ids of target genes target_levels <- c(\"YLR299W\", \"YFL041W\", \"YKR067W\", \"YLR355C\",                    \"YNL251C\", \"YOR285W\", \"YLR178C\") # Repeats of gene names to account for testing multiple primer sets gene_name_values <- c(rep(gene_name_levels[1:2], each = 3),                       rep(gene_name_levels[3:7], each = 2)) # id numbers of multiple probesets (reflecting IDs as ordered) target_id_levels <- paste(gene_name_values,   c(1, 2, 3, 1, 3, 4, 1, 4, 1, 4, 1, 2, 4, 5, 1, 5),   sep = \"_\" )   rowkey <- tibble(   well_row = LETTERS[1:16],   gene_name = factor(gene_name_values, levels = gene_name_levels),   target_id = factor(target_id_levels, levels = target_id_levels) ) print(rowkey) ## # A tibble: 16 × 3 ##    well_row gene_name target_id ##    <chr>    <fct>     <fct>     ##  1 A        ECM38     ECM38_1   ##  2 B        ECM38     ECM38_2   ##  3 C        ECM38     ECM38_3   ##  4 D        FET5      FET5_1    ##  5 E        FET5      FET5_3    ##  6 F        FET5      FET5_4    ##  7 G        GPT2      GPT2_1    ##  8 H        GPT2      GPT2_4    ##  9 I        ILV5      ILV5_1    ## 10 J        ILV5      ILV5_4    ## 11 K        NRD1      NRD1_1    ## 12 L        NRD1      NRD1_2    ## 13 M        RDL1      RDL1_4    ## 14 N        RDL1      RDL1_5    ## 15 O        TFS1      TFS1_1    ## 16 P        TFS1      TFS1_5"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"combine-the-row-key-describing-primer-sets-with-column-key-describing-on-samples-and-dilutions-","dir":"Articles","previous_headings":"Set up experiment","what":"Combine the row key describing primer sets with column key describing on samples and dilutions.","title":"Primers and probes calibration vignette","text":"use default design built tidyqpcr, create_colkey_4diln_2ctrl_in_24.","code":"plate1plan <-   label_plate_rowcol(     create_blank_plate(),     rowkey,     create_colkey_4diln_2ctrl_in_24()   ) %>%   mutate(sample_id = paste(biol_rep, dilution_nice, sep = \"_\"))"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"spot-check-the-plate-plan","dir":"Articles","previous_headings":"Set up experiment","what":"Spot-check the plate plan","title":"Primers and probes calibration vignette","text":"Checks selected technical replicate/probe/dilution combinations, plate contains right number replicates.","code":"plate1plan %>%   filter(tech_rep == \"1\",          target_id == target_id_levels[1],          dilution_nice == \"1x\") ## # A tibble: 2 × 11 ##   well  well_row well_col dilution dilution_nice prep_type biol_rep tech_rep ##   <chr> <fct>    <fct>       <dbl> <chr>         <fct>     <fct>    <fct>    ## 1 A1    A        1               1 1x            +RT       A        1        ## 2 A13   A        13              1 1x            +RT       B        1        ## # ℹ 3 more variables: gene_name <fct>, target_id <fct>, sample_id <chr> plate1plan %>%   filter(tech_rep == \"2\",          target_id == target_id_levels[4]) ## # A tibble: 12 × 11 ##    well  well_row well_col dilution dilution_nice prep_type biol_rep tech_rep ##    <chr> <fct>    <fct>       <dbl> <chr>         <fct>     <fct>    <fct>    ##  1 D7    D        7           1     1x            +RT       A        2        ##  2 D8    D        8           0.2   5x            +RT       A        2        ##  3 D9    D        9           0.04  25x           +RT       A        2        ##  4 D10   D        10          0.008 125x          +RT       A        2        ##  5 D11   D        11          1     -RT           -RT       A        2        ##  6 D12   D        12          1     NT            NT        A        2        ##  7 D19   D        19          1     1x            +RT       B        2        ##  8 D20   D        20          0.2   5x            +RT       B        2        ##  9 D21   D        21          0.04  25x           +RT       B        2        ## 10 D22   D        22          0.008 125x          +RT       B        2        ## 11 D23   D        23          1     -RT           -RT       B        2        ## 12 D24   D        24          1     NT            NT        B        2        ## # ℹ 3 more variables: gene_name <fct>, target_id <fct>, sample_id <chr>"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"display-the-plate-plan","dir":"Articles","previous_headings":"Set up experiment","what":"Display the plate plan","title":"Primers and probes calibration vignette","text":"can printed facilitate loading plate correctly.","code":"display_plate_qpcr(plate1plan)"},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"load-and-summarize-data","dir":"Articles","previous_headings":"Analyse Cq (quantification cycle count) data","what":"Load and summarize data","title":"Primers and probes calibration vignette","text":"","code":"# NOTE: system.file() accesses data from this R package # To use your own data, remove the call to system.file(), # instead pass your data's filename to read_lightcycler_1colour_cq() # or to another relevant read_ function file_path_cq <- system.file(\"extdata\",               \"Edward_qPCR_Nrd1_calibration_2019-02-02_Cq.txt.gz\",               package = \"tidyqpcr\")  plates <-    file_path_cq %>%   read_lightcycler_1colour_cq() %>%   right_join(plate1plan, by = \"well\") plates ## # A tibble: 384 × 18 ##    include color well  sample_info    cq concentration standard status well_row ##    <lgl>   <int> <chr> <chr>       <dbl>         <dbl>    <int> <lgl>  <fct>    ##  1 TRUE      255 A1    Sample 1     22.8            NA        0 NA     A        ##  2 TRUE      255 A2    Sample 2     24.7            NA        0 NA     A        ##  3 TRUE      255 A3    Sample 3     26.8            NA        0 NA     A        ##  4 TRUE      255 A4    Sample 4     28.6            NA        0 NA     A        ##  5 TRUE    65280 A5    Sample 5     NA              NA        0 NA     A        ##  6 TRUE    65280 A6    Sample 6     NA              NA        0 NA     A        ##  7 TRUE      255 A7    Sample 7     23.2            NA        0 NA     A        ##  8 TRUE      255 A8    Sample 8     24.8            NA        0 NA     A        ##  9 TRUE      255 A9    Sample 9     26.9            NA        0 NA     A        ## 10 TRUE    65280 A10   Sample 10    NA              NA        0 NA     A        ## # ℹ 374 more rows ## # ℹ 9 more variables: well_col <fct>, dilution <dbl>, dilution_nice <chr>, ## #   prep_type <fct>, biol_rep <fct>, tech_rep <fct>, gene_name <fct>, ## #   target_id <fct>, sample_id <chr> summary(plates) ##  include            color           well           sample_info        ##  Mode:logical   Min.   :  255   Length:384         Length:384         ##  TRUE:384       1st Qu.:  255   Class :character   Class :character   ##                 Median :  255   Mode  :character   Mode  :character   ##                 Mean   :18035                                         ##                 3rd Qu.:65280                                         ##                 Max.   :65280                                         ##                                                                       ##        cq        concentration    standard  status           well_row   ##  Min.   :13.89   Min.   : NA   Min.   :0   Mode:logical   A      : 24   ##  1st Qu.:20.55   1st Qu.: NA   1st Qu.:0   NA's:384       B      : 24   ##  Median :23.44   Median : NA   Median :0                  C      : 24   ##  Mean   :23.63   Mean   :NaN   Mean   :0                  D      : 24   ##  3rd Qu.:26.68   3rd Qu.: NA   3rd Qu.:0                  E      : 24   ##  Max.   :36.77   Max.   : NA   Max.   :0                  F      : 24   ##  NA's   :105     NA's   :384                              (Other):240   ##     well_col      dilution      dilution_nice      prep_type biol_rep tech_rep ##  1      : 16   Min.   :0.0080   Length:384         +RT:256   A:192    1:192    ##  2      : 16   1st Qu.:0.0400   Class :character   -RT: 64   B:192    2:192    ##  3      : 16   Median :0.6000   Mode  :character   NT : 64                     ##  4      : 16   Mean   :0.5413                                                  ##  5      : 16   3rd Qu.:1.0000                                                  ##  6      : 16   Max.   :1.0000                                                  ##  (Other):288                                                                   ##  gene_name    target_id    sample_id         ##  ECM38:72   ECM38_1: 24   Length:384         ##  FET5 :72   ECM38_2: 24   Class :character   ##  GPT2 :48   ECM38_3: 24   Mode  :character   ##  ILV5 :48   FET5_1 : 24                      ##  NRD1 :48   FET5_3 : 24                      ##  RDL1 :48   FET5_4 : 24                      ##  TFS1 :48   (Other):240"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"visualise-cq-values-for-each-well-","dir":"Articles","previous_headings":"Analyse Cq (quantification cycle count) data","what":"Visualise Cq values for each well.","title":"Primers and probes calibration vignette","text":"Visualising Cq values shows Cq value different primer set row. Within section row single replicate dilutions, Cq consistently increases dilutions expected. grey tiles -RT NT columns mean value NA, .e. Cq value reported. good.  Visualisation might also help identify unwanted positional effects. example, PCR machine broken, wells close edge plate can different behaviour central wells.","code":"display_plate_value(plates)"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"plot-unnormalized-data-shows-that--rt-and-nt-controls-are-low","dir":"Articles","previous_headings":"Analyse Cq (quantification cycle count) data","what":"Plot unnormalized data shows that -RT and NT controls are low","title":"Primers and probes calibration vignette","text":"plot visualises Cq data way highlights meaning instead position plate. , shows Cq value different primer set, primer st Cq consistently increases dilutions expected. , detect signal NT (template) negative control points mostly missing. weak signal high Cq -RT (reverse transcriptase) negative controls.","code":"ggplot(data = plates) +   geom_point(aes(x = target_id,                  y = cq,                  colour = dilution_nice,                  shape = prep_type),     position = position_jitter(width = 0.2, height = 0)   ) +   labs(     y = \"Cycle count to threshold\",     title = \"All reps, unnormalized\"   ) +   facet_wrap(~biol_rep) +   scale_y_continuous(breaks = seq(from = 15, to = 35, by = 5)) +    theme(axis.text.x = element_text(angle = 90, vjust = 0.5),         panel.grid.major.y = element_line(colour=\"grey80\", size = 0.2))"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"dilution-series-is-linear-for-all-probes","dir":"Articles","previous_headings":"Analyse Cq (quantification cycle count) data","what":"Dilution series is linear for all probes","title":"Primers and probes calibration vignette","text":"Visual display linearity cq log(dilution).","code":"ggplot(data = filter(plates, prep_type == \"+RT\"), aes(x = dilution, y = cq)) +   geom_point() +   stat_smooth(     formula = y ~ x, method = \"lm\", se = FALSE,     aes(colour = \"fit\", linetype = \"fit\")   ) +   stat_smooth(     formula = y ~ 1 + offset(-x * log(10) / log(2)), method = \"lm\", se = FALSE,     aes(colour = \"theory\", linetype = \"theory\")   ) +   scale_x_log10(breaks = 10 ^ - (0:3)) +   scale_y_continuous(breaks = seq(0, 30, 2)) +   labs(     y = \"Cycle count to threshold\",     title = \"All reps, unnormalized\",     colour = \"Dilution\", linetype = \"Dilution\"   ) +   facet_grid(target_id ~ biol_rep, scales = \"free_y\") +   theme(axis.text.x = element_text(angle = 90, vjust = 0.5))"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"calculate-primer-efficiencies-for-all-probes","dir":"Articles","previous_headings":"Analyse Cq (quantification cycle count) data","what":"Calculate primer efficiencies for all probes","title":"Primers and probes calibration vignette","text":"Use regression estimate linearity cq log(dilution), including slope efficiency.","code":"calculate_efficiency_bytargetid(plates) ## # A tibble: 16 × 4 ##    target_id efficiency efficiency.sd r.squared ##    <fct>          <dbl>         <dbl>     <dbl> ##  1 ECM38_1        0.923        0.0480     0.970 ##  2 ECM38_2        0.958        0.0429     0.975 ##  3 ECM38_3        1.15         0.0524     0.974 ##  4 FET5_1         1.05         0.0317     0.988 ##  5 FET5_3         1.09         0.0507     0.973 ##  6 FET5_4         1.09         0.0413     0.982 ##  7 GPT2_1         1.14         0.0601     0.965 ##  8 GPT2_4         1.08         0.0345     0.987 ##  9 ILV5_1         1.04         0.0222     0.994 ## 10 ILV5_4         1.09         0.0239     0.994 ## 11 NRD1_1         0.998        0.0498     0.969 ## 12 NRD1_2         1.08         0.0423     0.981 ## 13 RDL1_4         1.06         0.0386     0.983 ## 14 RDL1_5         1.03         0.0327     0.987 ## 15 TFS1_1         1.03         0.0551     0.964 ## 16 TFS1_5         1.18         0.0544     0.973"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"dilution-series-for-nice-probes-only-shows-linearity-clearly","dir":"Articles","previous_headings":"Analyse Cq (quantification cycle count) data","what":"Dilution series for nice probes only shows linearity clearly","title":"Primers and probes calibration vignette","text":"","code":"target_id_levels_niceprobes <-      c(\"ECM38_3\", \"FET5_1\", \"GPT2_4\", \"ILV5_4\",       \"NRD1_1\",  \"RDL1_4\", \"TFS1_1\")  ggplot(   data = filter(plates,                 prep_type == \"+RT\",                 target_id %in% target_id_levels_niceprobes),   aes(x = dilution, y = cq) ) +   geom_point() +   stat_smooth(     formula = y ~ x, method = \"lm\", se = FALSE,     aes(colour = \"fit\", linetype = \"fit\")   ) +   stat_smooth(     formula = y ~ 1 + offset(-x * log(10) / log(2)),     method = \"lm\",     se = FALSE,     aes(colour = \"theory\", linetype = \"theory\")   ) +   scale_x_log10(breaks = 10 ^ - (0:3)) +   scale_y_continuous(breaks = seq(0, 30, 2)) +   labs(     y = \"Cycle count to threshold\",     title = \"All reps, unnormalized\",     colour = \"Dilution\", linetype = \"Dilution\"   ) +   facet_grid(target_id ~ biol_rep, scales = \"free_y\") +   theme(axis.text.x = element_text(angle = 90, vjust = 0.5))"},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"load-raw-data-for-amplification-and-melt-curves-","dir":"Articles","previous_headings":"Analyse amplification and melt curve data","what":"Load raw data for amplification and melt curves.","title":"Primers and probes calibration vignette","text":"","code":"# NOTE: system.file() accesses data from this R package # To use your own data, remove the call to system.file(), # instead pass your data's filename to read_lightcycler_1colour_cq() # or to another relevant read_ function  file_path_raw <- system.file(\"extdata/Edward_qPCR_Nrd1_calibration_2019-02-02.txt.gz\",                              package = \"tidyqpcr\")  plate1curve <- file_path_raw %>%     read_lightcycler_1colour_raw() %>%     debaseline() %>%     left_join(plate1plan, by = \"well\")  # amplification curve is program 2 platesamp <- plate1curve %>%   filter(program_no == 2)  # melt curve is program 3 or 4, depending on cycler setting platesmelt <- plate1curve %>%   filter(program_no == 3) %>%   calculate_drdt_plate() %>%   filter(temperature >= 61)"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"plot-de-baselined-raw-data-for-single-well","dir":"Articles","previous_headings":"Analyse amplification and melt curve data","what":"Plot de-baseline’d raw data for single well","title":"Primers and probes calibration vignette","text":"","code":"ggplot(   data = platesamp %>% filter(well == \"A1\"),   aes(x = cycle, y = fluor_signal) ) +   geom_line() +   scale_y_continuous(expand = c(0.01, 0.01))"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"plot-all-amplification-curves","dir":"Articles","previous_headings":"Analyse amplification and melt curve data","what":"Plot all amplification curves","title":"Primers and probes calibration vignette","text":"Broken technical replicate , avoid overplotting.","code":"ggplot(   data = platesamp %>%     filter(tech_rep == \"1\"),   aes(x = cycle,       y = fluor_signal,       colour = factor(dilution),       linetype = prep_type) ) +   facet_grid(target_id ~ biol_rep, scales = \"free_y\") +   scale_linetype_manual(values = c(\"+RT\" = \"solid\",                                    \"-RT\" = \"dashed\",                                    \"NT\" = \"dotted\")) +   geom_line() +   scale_x_continuous(breaks = seq(60, 100, 10),                      minor_breaks = seq(60, 100, 5)) +   labs(title = \"All Amp Curves, tech_rep A\") ggplot(   data = platesamp %>%     filter(tech_rep == \"2\"),   aes(x = cycle,       y = fluor_signal,       colour = factor(dilution),       linetype = prep_type) ) +   facet_grid(target_id ~ biol_rep, scales = \"free_y\") +   scale_linetype_manual(values = c(\"+RT\" = \"solid\",                                    \"-RT\" = \"dashed\",                                    \"NT\" = \"dotted\")) +   geom_line() +   scale_x_continuous(breaks = seq(60, 100, 10),                      minor_breaks = seq(60, 100, 5)) +   labs(title = \"All Amp Curves, tech_rep B\")"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"plot-melt-curve-for-single-well","dir":"Articles","previous_headings":"Analyse amplification and melt curve data","what":"Plot melt curve for single well","title":"Primers and probes calibration vignette","text":"","code":"ggplot(   data = platesmelt %>%     filter(well == \"A1\"),   aes(x = temperature, y = dRdT) ) +   facet_wrap(~target_id) +   geom_line() +   scale_y_continuous(expand = c(0.02, 0.02))"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"plot-all-melt-curves","dir":"Articles","previous_headings":"Analyse amplification and melt curve data","what":"Plot all melt curves","title":"Primers and probes calibration vignette","text":"broken technical replicate.","code":"ggplot(   data = platesmelt %>%     filter(tech_rep == \"1\"),   aes(x = temperature,       y = dRdT,       colour = factor(dilution),       linetype = prep_type) ) +   facet_grid(target_id ~ biol_rep, scales = \"free_y\") +   scale_linetype_manual(values = c(\"+RT\" = \"solid\",                                    \"-RT\" = \"dashed\",                                    \"NT\" = \"dotted\")) +   geom_line() +   scale_x_continuous(breaks = seq(60, 100, 10),                      minor_breaks = seq(60, 100, 5)) +   labs(title = \"All Melt Curves, tech_rep A\") ggplot(   data = platesmelt %>%     filter(tech_rep == \"2\"),   aes(x = temperature,       y = dRdT,       colour = factor(dilution),       linetype = prep_type) ) +   facet_grid(target_id ~ biol_rep, scales = \"free_y\") +   scale_linetype_manual(values = c(\"+RT\" = \"solid\",                                    \"-RT\" = \"dashed\",                                    \"NT\" = \"dotted\")) +   geom_line() +   scale_x_continuous(breaks = seq(60, 100, 10),                      minor_breaks = seq(60, 100, 5)) +   labs(title = \"All Melt Curves, tech_rep B\")"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"plot-zoomed-melt-curves","dir":"Articles","previous_headings":"Analyse amplification and melt curve data","what":"Plot zoomed melt curves","title":"Primers and probes calibration vignette","text":"","code":"ggplot(   data = platesmelt %>%     filter(tech_rep == \"1\", prep_type == \"+RT\"),   aes(x = temperature, y = dRdT, colour = factor(dilution)) ) +   facet_grid(target_id ~ biol_rep, scales = \"free_y\") +   geom_line() +   scale_x_continuous(     breaks = seq(60, 100, 5),     minor_breaks = seq(60, 100, 1),     limits = c(73, 87)   ) +   labs(title = \"Melt curves, zoomed, tech_rep A\") +   theme(     panel.grid.major.x = element_line(colour = \"grey50\", size = 0.4),     panel.grid.minor.x = element_line(colour = \"grey70\", size = 0.1)   ) ggplot(   data = platesmelt %>%     filter(tech_rep == \"2\", prep_type == \"+RT\"),   aes(x = temperature, y = dRdT, colour = factor(dilution)) ) +   facet_grid(target_id ~ biol_rep, scales = \"free_y\") +   geom_line() +   scale_x_continuous(     breaks = seq(60, 100, 5),     minor_breaks = seq(60, 100, 1),     limits = c(73, 87)   ) +   labs(title = \"Melt curves, zoomed, tech_rep B\") +   theme(     panel.grid.major.x = element_line(colour = \"grey50\", size = 0.4),     panel.grid.minor.x = element_line(colour = \"grey70\", size = 0.1)   )"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"plot-only-zoomed-melt-curves-for-nice-probes","dir":"Articles","previous_headings":"Analyse amplification and melt curve data","what":"Plot only zoomed melt curves for nice probes","title":"Primers and probes calibration vignette","text":"","code":"ggplot(   data = platesmelt %>%     filter(       tech_rep == \"1\",       prep_type == \"+RT\",       dilution_nice == \"1x\",       target_id %in% target_id_levels_niceprobes     ),   aes(x = temperature, y = dRdT, colour = biol_rep) ) +   facet_grid(target_id ~ ., scales = \"free_y\") +   geom_line() +   scale_x_continuous(     breaks = seq(60, 100, 5),     minor_breaks = seq(60, 100, 1),     limits = c(73, 87)   ) +   labs(title = \"Nice probes, tech_rep A\") +   theme(     panel.grid.major.x = element_line(colour = \"grey50\", size = 0.4),     panel.grid.minor.x = element_line(colour = \"grey70\", size = 0.1)   )"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/calibration_vignette.html","id":"conclude-acceptable-primer-sets","dir":"Articles","previous_headings":"","what":"Conclude acceptable primer sets","title":"Primers and probes calibration vignette","text":"probes sensible standard curves, amplification curves, melt curves. tie-breakers pick highly detected probe. ECM38 set 3 FET5 set 1 4 GPT2 set 4 ILV5 set 4 NRD1 set 1 2 RDL1 set 4 TFS1 set 1","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"summary-an-example-96-well-qpcr-experiment-","dir":"Articles","previous_headings":"","what":"Summary: an example 96-well qPCR experiment.","title":"Delta Cq 96-well plate qPCR analysis example","text":"vignette shows use tidyqpcr functions normalize plot data single RT-qPCR experiment 96-well plate. include relative quantification, calculations delta Cq (within-sample normalization) delta delta Cq (-sample normalization), example plots. real RT-qPCR data Stuart McKellar: Aim: measure expression two mRNAs one reference control two strains bacteria various growth stages (measured OD: 0.5, 1.5, 3, 6, overnight culture, ‘ODON’). mRNAs: GlyS SpoVG 5S rRNA used reference control. Bacterial strains: wild-type (WT) mutant (dAgr). Equipment: Data collected Roche LightCycler 480, LightCycler software used estimate Cq/Ct values export text-format table. sample information specified input data file.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"setup-knitr-options-and-load-packages","dir":"Articles","previous_headings":"Summary: an example 96-well qPCR experiment.","what":"Setup knitr options and load packages","title":"Delta Cq 96-well plate qPCR analysis example","text":"","code":"# knitr options for report generation knitr::opts_chunk$set(   warning = FALSE, message = FALSE, echo = TRUE, cache = FALSE,   results = \"show\" )  # Load packages library(tidyr) library(ggplot2) library(dplyr) library(readr) library(tidyqpcr)  # set default theme for graphics theme_set(theme_bw(base_size = 11) %+replace%   theme(     strip.background = element_blank(),     panel.grid = element_blank()   ))"},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"load-data-from-machine-output-file","dir":"Articles","previous_headings":"Loading, organizing, and sanity-checking data.","what":"Load data from machine output file","title":"Delta Cq 96-well plate qPCR analysis example","text":"start loading data experiment. print data screen , always good idea look data find loaded correctly behaves expected, . Printing data shows sample_info column contains information sample. still need organize information already associated data. plate setup vignette describes “set ” plate plan put sample information , input data already contain sample information. Note “cleaned ” data file vignette, remove irrelevant rows columns. information load Cq data directly LightCycler outputs, see ?read_lightcycler_1colour_cq.","code":"# NOTE: system.file() accesses data from this R package # To use your own data, remove the call to system.file(), # instead pass your data's filename to read_tsv() # or to another relevant read_ function  file_path_cq <- system.file(\"extdata\",                             \"Stuart_dAgr_glyS_spoVG_5S_individualWells_Cq_select.txt.gz\",                             package = \"tidyqpcr\")  plate_cq_extdata <- file_path_cq %>%   read_tsv()  plate_cq_extdata ## # A tibble: 90 × 3 ##    well  sample_info      cq ##    <chr> <chr>         <dbl> ##  1 A1    WT OD0.5 glyS  14.0 ##  2 A2    WT OD0.5 glyS  13.9 ##  3 A3    WT OD0.5 glyS  14.0 ##  4 A4    WT OD1.5 glyS  14.6 ##  5 A5    WT OD1.5 glyS  16.1 ##  6 A6    WT OD1.5 glyS  14.4 ##  7 A7    WT OD3 glyS    15.6 ##  8 A8    WT OD3 glyS    15.6 ##  9 A9    WT OD3 glyS    15.5 ## 10 A10   WT OD6 glyS    12.8 ## # ℹ 80 more rows"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"organize-sample-and-target-data-on-the-plate","dir":"Articles","previous_headings":"Loading, organizing, and sanity-checking data.","what":"Organize sample and target data on the plate","title":"Delta Cq 96-well plate qPCR analysis example","text":"sample_info column contains values like WT OD0.5 glyS, WT describes strain, OD0.5 describes growth stage (optical density), glyS describes target gene detected. three pieces information delimited spaces. use separate function, tidyr package, separate three pieces information sample_info three columns, (strain, OD, target_id), contains single piece information. Note tidyqpcr insistently refers targets detected qPCR experiment target_id, primer sets hydrolysis probes targeting distinct gene regions, RNA isoforms, SNPs, chromosomal locations ChIP studies. experiment three amplicons, different RNA. However, tidyqpcr expects column called sample_id identifies unique sample - , identified strain (e.g. WT) growth stage (e.g. OD0.5). use unite function, tidyr package, create new column sample_id unites strain OD. Note key tidyqpcr variables: sample_id target_id, can defined manually, done plate setup vignette, data contain complete correct sample_info column. , little organization. add row column labels well, can later draw plate plan check description. use tidyqpcr function create_blank_plate_96well make “blank” plate plan, join information data. join function inner_join dplyr package. use tidyverse pipe operator %>% transformations row, one line. , print table check columns data correct.","code":"plate_cq_data <-    create_blank_plate_96well() %>% # row and column labels for each well   inner_join(plate_cq_extdata, by = \"well\") %>% # join that info to loaded data   # next separate the sample and target information for future data analysis   separate(sample_info,            into = c(\"strain\",\"OD\",\"target_id\"),             sep = \" \",            remove = FALSE) %>%   unite(\"sample_id\",strain, OD, remove = FALSE) %>% # put sample_id together   mutate(prep_type = \"+RT\") # add information on cDNA prep type  plate_cq_data ## # A tibble: 90 × 10 ##    well  well_row well_col sample_info   sample_id strain OD    target_id    cq ##    <chr> <fct>    <fct>    <chr>         <chr>     <chr>  <chr> <chr>     <dbl> ##  1 A1    A        1        WT OD0.5 glyS WT_OD0.5  WT     OD0.5 glyS       14.0 ##  2 A2    A        2        WT OD0.5 glyS WT_OD0.5  WT     OD0.5 glyS       13.9 ##  3 A3    A        3        WT OD0.5 glyS WT_OD0.5  WT     OD0.5 glyS       14.0 ##  4 A4    A        4        WT OD1.5 glyS WT_OD1.5  WT     OD1.5 glyS       14.6 ##  5 A5    A        5        WT OD1.5 glyS WT_OD1.5  WT     OD1.5 glyS       16.1 ##  6 A6    A        6        WT OD1.5 glyS WT_OD1.5  WT     OD1.5 glyS       14.4 ##  7 A7    A        7        WT OD3 glyS   WT_OD3    WT     OD3   glyS       15.6 ##  8 A8    A        8        WT OD3 glyS   WT_OD3    WT     OD3   glyS       15.6 ##  9 A9    A        9        WT OD3 glyS   WT_OD3    WT     OD3   glyS       15.5 ## 10 A10   A        10       WT OD6 glyS   WT_OD6    WT     OD6   glyS       12.8 ## # ℹ 80 more rows ## # ℹ 1 more variable: prep_type <chr>"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"display-the-plate-layout","dir":"Articles","previous_headings":"Loading, organizing, and sanity-checking data.","what":"Display the plate layout","title":"Delta Cq 96-well plate qPCR analysis example","text":"easier understand pictures tables text. display layout samples within microplate, tidyqpcr function display_plate_qpcr. use show samples laid within plate.  , different colours indicate different target_ids, default behaviour display_plate_qpcr. display makes possible see three identically-labeled wells - technical replicates - row.","code":"display_plate_qpcr(plate_cq_data)"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"plot-unnormalized-cq-data","dir":"Articles","previous_headings":"Loading, organizing, and sanity-checking data.","what":"Plot unnormalized Cq data","title":"Delta Cq 96-well plate qPCR analysis example","text":"Next plot data visualise unnormalised data points. visual explorations crucial sanity check, data , also possible mistakes made loading data assigning labels. use functions ggplot plot data. interesting output Cq values, go y axis. data measures three target genes two strains five different growth conditions. first plot make one plot panel facet growth condition. facet shows values three targets two strains, targets x-axis strains indicated colour shape.  plot shows Cq values 5S reproducible low (Cq 5) samples. makes biological sense 5S ribosomal rRNA extremely abundant. generally, plot shows technical replicates close together. Technical replicates expected close , observation visually confirms labeled wells correctly.","code":"ggplot(data = plate_cq_data) +   geom_point(aes(x = target_id, y = cq, shape = strain, colour = strain),     position = position_jitter(width = 0.2, height = 0)   ) +   labs(     y = \"Quantification cycle (Cq)\",     title = \"All reps, unnormalized\"   ) +   facet_wrap(~OD,ncol=5) +    theme(axis.text.x = element_text(angle = 90, vjust = 0.5))"},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"normalize-cq-to-5s-rrna-within-sample-only","dir":"Articles","previous_headings":"Normalized data: delta Cq","what":"Normalize Cq to 5S rRNA, within Sample only","title":"Delta Cq 96-well plate qPCR analysis example","text":"Next “normalize” calculating delta Cq () target sample. treat 5S rRNA reference gene, mRNA targets estimate delta_cq value difference median value 5S rRNA within sample. normalisation performed calculate_deltacq_bysampleid function. function works follows: provide data name reference gene (.e. ref_target_ids = \"5S\") function calculate median Cq reference gene separately sample function subtract value Cq every measured gene, separately sample, adding delta_cq column output data function also calculates relative abundance normalized ratio reference targets, , adding rel_abund column output data. use multiple reference target ids, function take median across Cq values reference target ids. can also ask function use different summary, e.g. mean instead median. See help file ?calculate_deltacq_bysampleid details. ever, print data screen sanity check.","code":"plate_norm <- plate_cq_data %>%   calculate_deltacq_bysampleid(ref_target_ids = \"5S\")  plate_norm ## # A tibble: 90 × 13 ##    well  well_row well_col sample_info    sample_id strain OD    target_id    cq ##    <chr> <fct>    <fct>    <chr>          <chr>     <chr>  <chr> <chr>     <dbl> ##  1 A1    A        1        WT OD0.5 glyS  WT_OD0.5  WT     OD0.5 glyS      14.0  ##  2 A2    A        2        WT OD0.5 glyS  WT_OD0.5  WT     OD0.5 glyS      13.9  ##  3 A3    A        3        WT OD0.5 glyS  WT_OD0.5  WT     OD0.5 glyS      14.0  ##  4 B4    B        4        WT OD0.5 spoVG WT_OD0.5  WT     OD0.5 spoVG     13.6  ##  5 B5    B        5        WT OD0.5 spoVG WT_OD0.5  WT     OD0.5 spoVG     13.6  ##  6 B6    B        6        WT OD0.5 spoVG WT_OD0.5  WT     OD0.5 spoVG     13.6  ##  7 C7    C        7        WT OD0.5 5S    WT_OD0.5  WT     OD0.5 5S         4.91 ##  8 C8    C        8        WT OD0.5 5S    WT_OD0.5  WT     OD0.5 5S         4.96 ##  9 C9    C        9        WT OD0.5 5S    WT_OD0.5  WT     OD0.5 5S         5.01 ## 10 A4    A        4        WT OD1.5 glyS  WT_OD1.5  WT     OD1.5 glyS      14.6  ## # ℹ 80 more rows ## # ℹ 4 more variables: prep_type <chr>, ref_cq <dbl>, delta_cq <dbl>, ## #   rel_abund <dbl>"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"plot-normalized-data-all-reps","dir":"Articles","previous_headings":"Normalized data: delta Cq","what":"Plot normalized data, all reps","title":"Delta Cq 96-well plate qPCR analysis example","text":"Similar , plot replicates normalised data.  looks quite similar unnormalized data plot, except expected reference gene samples now deltaCq = 0, small movements points reflecting normalization process.","code":"ggplot(data = plate_norm) +   geom_point(aes(x = target_id, y = delta_cq, shape = strain, colour = strain),     position = position_jitter(width = 0.2, height = 0)   ) +   labs(y = \"delta Cq\") +   facet_wrap(~OD,ncol=5) +    theme(axis.text.x = element_text(angle = 90, vjust = 0.5))"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"calculate-a-summary-value-for-each-sample-target-combination","dir":"Articles","previous_headings":"Normalized data: delta Cq","what":"Calculate a summary value for each sample-target combination","title":"Delta Cq 96-well plate qPCR analysis example","text":"made normalized values, use group_by summarize dplyr package calculate median values delta_cq rel_abund sample. makes smaller table collapsing 3 technical replicates single summary value sample_id-target_id combination. can easier focus smaller subset data. print just data single target, glyS: table confirms glyS summary Cq values similar strains given OD value, higher ODON.","code":"plate_med <- plate_norm %>%   group_by(sample_id, strain, OD, target_id) %>%   summarize(     delta_cq  = median(delta_cq, na.rm = TRUE),     rel_abund = median(rel_abund, na.rm = TRUE)   )  plate_med ## # A tibble: 30 × 6 ## # Groups:   sample_id, strain, OD [10] ##    sample_id strain OD    target_id delta_cq rel_abund ##    <chr>     <chr>  <chr> <chr>        <dbl>     <dbl> ##  1 WT_OD0.5  WT     OD0.5 5S            0     1        ##  2 WT_OD0.5  WT     OD0.5 glyS          8.99  0.00197  ##  3 WT_OD0.5  WT     OD0.5 spoVG         8.63  0.00252  ##  4 WT_OD1.5  WT     OD1.5 5S            0     1        ##  5 WT_OD1.5  WT     OD1.5 glyS          9.71  0.00119  ##  6 WT_OD1.5  WT     OD1.5 spoVG         7.98  0.00396  ##  7 WT_OD3    WT     OD3   5S            0     1        ##  8 WT_OD3    WT     OD3   glyS         10.7   0.000585 ##  9 WT_OD3    WT     OD3   spoVG         8.86  0.00215  ## 10 WT_OD6    WT     OD6   5S            0     1        ## # ℹ 20 more rows filter(plate_med, target_id == \"glyS\") ## # A tibble: 10 × 6 ## # Groups:   sample_id, strain, OD [10] ##    sample_id  strain OD    target_id delta_cq rel_abund ##    <chr>      <chr>  <chr> <chr>        <dbl>     <dbl> ##  1 WT_OD0.5   WT     OD0.5 glyS          8.99 0.00197   ##  2 WT_OD1.5   WT     OD1.5 glyS          9.71 0.00119   ##  3 WT_OD3     WT     OD3   glyS         10.7  0.000585  ##  4 WT_OD6     WT     OD6   glyS          8.46 0.00284   ##  5 WT_ODON    WT     ODON  glyS         14.3  0.0000489 ##  6 dAgr_OD0.5 dAgr   OD0.5 glyS          8.82 0.00221   ##  7 dAgr_OD1.5 dAgr   OD1.5 glyS          9.64 0.00125   ##  8 dAgr_OD3   dAgr   OD3   glyS         10.8  0.000577  ##  9 dAgr_OD6   dAgr   OD6   glyS         10.1  0.000930  ## 10 dAgr_ODON  dAgr   ODON  glyS         13.6  0.0000822"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"plot-delta-cq-for-each-od-separately-across-genes","dir":"Articles","previous_headings":"Normalized data: delta Cq","what":"Plot delta Cq for each OD separately across genes","title":"Delta Cq 96-well plate qPCR analysis example","text":"plot summarized delta Cq, now single point sample_id-target_id combination (representing summary three technical replicates). , plot OD separate facet panel emphasizes comparisons target genes OD. exclude reference target gene, 5S, delta Cq always zero.","code":"ggplot(data = filter(plate_med, target_id != \"5S\") ) +    geom_point(aes(x = target_id, y = delta_cq, shape = strain, colour = strain) ) +    labs(     y = \"delta Cq\"   ) +   facet_wrap(~OD,ncol=5) +    theme(axis.text.x = element_text(angle = 90, vjust = 0.5))"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"plot-relative-abundance-for-each-od-separately-across-genes","dir":"Articles","previous_headings":"Normalized data: delta Cq","what":"Plot relative abundance for each OD separately across genes","title":"Delta Cq 96-well plate qPCR analysis example","text":"calculate_deltacq_bysampleid function also reports abundance relative reference target, 5S rRNA. Precisely, . Now plot relative abundance, OD separate facet panel, emphasizes comparisons target genes OD.","code":"ggplot(data = filter(plate_med, target_id != \"5S\") ) +    geom_point(aes(x = target_id, y = rel_abund, shape = strain, colour = strain) ) +    labs(     y = \"RNA abundance relative to 5S\"   ) +   facet_wrap(~OD,ncol=5) +    theme(axis.text.x = element_text(angle = 90, vjust = 0.5))"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"plot-relative-abundance-for-each-gene-separately-across-ods","dir":"Articles","previous_headings":"Normalized data: delta Cq","what":"Plot relative abundance for each gene separately across ODs","title":"Delta Cq 96-well plate qPCR analysis example","text":"plot summarized relative abundance different way: target gene separate facet panel. emphasizes changes target genes across ODs.  included alternate plot emphasize flexibility ggplot enables trying many different plotting strategies, find one appropriate data.","code":"ggplot(data = filter(plate_med, target_id != \"5S\") ) +    geom_line(aes(x = OD, y = rel_abund, colour = strain, group = strain)) +    geom_point(aes(x = OD, y = rel_abund, shape = strain, colour = strain)) +    labs(     y = \"RNA abundance relative to 5S\"   ) +   facet_wrap(~target_id,ncol=2) +    theme(axis.text.x = element_text(angle = 90, vjust = 0.5))"},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"calculate-delta-delta-cq-against-a-chosen-reference-sample","dir":"Articles","previous_headings":"Doubly normalized data: delta delta Cq","what":"Calculate delta delta cq against a chosen reference sample","title":"Delta Cq 96-well plate qPCR analysis example","text":"goal compare normalized levels glyS spoVG one growth condition another growth condition, .e. delta delta Cq (). estimate log2 fold change. case, reference growth condition wild-type strain OD 0.5. relies function tidyqpcr, calculate_deltadeltacq_bytargetid. provide data delta_cq already calculated, name reference samples (.e. ref_sample_ids = \"WT_OD0.5\") function calculate median delta_cq reference samples separately target. function subtract value delta_cq every measured gene, separately sample, adding deltadelta_cq column output data function also calculates fold change targets respect reference samples, , adding fold_change column output data. use multiple reference sample ids, function take median across Cq values reference target ids. example, might use multiple biological replicate samples single set conditions. can also ask function use different summary, e.g. mean instead median. See help file ?calculate_deltadeltacq_bytargetid details. Note summarised table plate_deltanorm_med, reference target 5S deltadelta_cq = 0 fold_change = 1 entries, values used normalization.","code":"plate_deltanorm <- plate_norm %>%   calculate_deltadeltacq_bytargetid(ref_sample_ids = \"WT_OD0.5\")  plate_deltanorm_med <- plate_deltanorm %>%     group_by(sample_id, strain, OD, target_id) %>%   summarize(     deltadelta_cq  = median(deltadelta_cq, na.rm = TRUE),     fold_change    = median(fold_change,   na.rm = TRUE)   )  plate_deltanorm ## # A tibble: 90 × 16 ##    well  well_row well_col sample_info sample_id strain OD    target_id    cq ##    <chr> <fct>    <fct>    <chr>       <chr>     <chr>  <chr> <chr>     <dbl> ##  1 C7    C        7        WT OD0.5 5S WT_OD0.5  WT     OD0.5 5S         4.91 ##  2 C8    C        8        WT OD0.5 5S WT_OD0.5  WT     OD0.5 5S         4.96 ##  3 C9    C        9        WT OD0.5 5S WT_OD0.5  WT     OD0.5 5S         5.01 ##  4 C10   C        10       WT OD1.5 5S WT_OD1.5  WT     OD1.5 5S         4.84 ##  5 C11   C        11       WT OD1.5 5S WT_OD1.5  WT     OD1.5 5S         4.78 ##  6 C12   C        12       WT OD1.5 5S WT_OD1.5  WT     OD1.5 5S         4.99 ##  7 D1    D        1        WT OD3 5S   WT_OD3    WT     OD3   5S         4.93 ##  8 D2    D        2        WT OD3 5S   WT_OD3    WT     OD3   5S         4.81 ##  9 D3    D        3        WT OD3 5S   WT_OD3    WT     OD3   5S         4.75 ## 10 D4    D        4        WT OD6 5S   WT_OD6    WT     OD6   5S         4.8  ## # ℹ 80 more rows ## # ℹ 7 more variables: prep_type <chr>, ref_cq <dbl>, delta_cq <dbl>, ## #   rel_abund <dbl>, ref_delta_cq <dbl>, deltadelta_cq <dbl>, fold_change <dbl> plate_deltanorm_med ## # A tibble: 30 × 6 ## # Groups:   sample_id, strain, OD [10] ##    sample_id strain OD    target_id deltadelta_cq fold_change ##    <chr>     <chr>  <chr> <chr>             <dbl>       <dbl> ##  1 WT_OD0.5  WT     OD0.5 5S                0           1     ##  2 WT_OD0.5  WT     OD0.5 glyS              0           1     ##  3 WT_OD0.5  WT     OD0.5 spoVG             0           1     ##  4 WT_OD1.5  WT     OD1.5 5S                0           1     ##  5 WT_OD1.5  WT     OD1.5 glyS             -0.720       0.607 ##  6 WT_OD1.5  WT     OD1.5 spoVG             0.650       1.57  ##  7 WT_OD3    WT     OD3   5S                0           1     ##  8 WT_OD3    WT     OD3   glyS             -1.75        0.297 ##  9 WT_OD3    WT     OD3   spoVG            -0.230       0.853 ## 10 WT_OD6    WT     OD6   5S                0           1     ## # ℹ 20 more rows"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"plot-delta-delta-cq-log2-fold-change-for-each-target-gene","dir":"Articles","previous_headings":"Doubly normalized data: delta delta Cq","what":"Plot delta delta Cq (log2-fold change) for each target gene","title":"Delta Cq 96-well plate qPCR analysis example","text":", delta delta Cq positive target highly detected relevant sample, compared reference samples.","code":"ggplot(data = filter(plate_deltanorm_med, target_id != \"5S\") ) +    geom_line(aes(x = OD, y = deltadelta_cq, colour = strain, group = strain)) +    geom_point(aes(x = OD, y = deltadelta_cq, shape = strain, colour = strain)) +    labs(     y = \"delta delta Cq (log2 fold change)\\n relative to WT OD 0.5\"   ) +   facet_wrap(~target_id,ncol=2) +    theme(axis.text.x = element_text(angle = 90, vjust = 0.5))"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"plot-fold-change-for-each-target-gene","dir":"Articles","previous_headings":"Doubly normalized data: delta delta Cq","what":"Plot fold change for each target gene","title":"Delta Cq 96-well plate qPCR analysis example","text":"plot fold change target gene, time-course style OD.","code":"ggplot(data = filter(plate_deltanorm_med, target_id != \"5S\") ) +    geom_line(aes(x = OD, y = fold_change, colour = strain, group = strain)) +    geom_point(aes(x = OD, y = fold_change, shape = strain, colour = strain)) +    labs(     y = \"fold change relative to WT OD 0.5\"   ) +   facet_wrap(~target_id,ncol=2) +    theme(axis.text.x = element_text(angle = 90, vjust = 0.5))"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Delta Cq 96-well plate qPCR analysis example","text":"vignette, learned basic workflow analysing Cq values qPCR data: Create sample_id column uniquely identify biological sample. Create target_id column uniquely identify target amplicon, e.g. detecting one gene. Calculate delta Cq relative abundance using calculate_deltacq_bysampleid. process normalizes values target values one reference targets within sample. Calculate delta delta Cq fold change using calculate_deltadeltacq_bytargetid. process normalizes value target sample values target one reference samples.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/articles/deltacq_96well_vignette.html","id":"notes-on-normalization-reference-targets-and-reference-samples","dir":"Articles","previous_headings":"","what":"Notes on normalization, reference targets, and reference samples","title":"Delta Cq 96-well plate qPCR analysis example","text":"section, discuss process normalization choices reference genes samples greater detail. Normalization tool making specific comparisons specific experimental designs. Tidyqpcr automatically implements one common approach, delta Cq method, calculate_deltacq_bysampleid. user picks one reference targets, within sample function calculates median Cq reference targets Cqs. user can also choose different summary function mean. single target id chosen reference, given summary delta Cq zero; might sensible external evidence target id genuinely stable abundance conditions tested. MIQE guidelines clear, correct, reliable quantification usually requires least three carefully chosen reference targets. next step calculate delta delta Cq, normalising sample control sample. Specifically, calculate_deltadeltacq_bytargetid estimates relative change individual target id delta Cq values, compared values one reference sample ids. single sample id chosen reference, values sample given summary delta delta Cq zero. Usually, experiment multiple biological replicates, replicates single condition chosen reference sample ids. case delta delta Cq values replicate reference condition zero, average zero. However, tidyverse tidyqpcr flexibility normalization way experiment requires. example, might want use samples reference, delta delta Cq reports difference value one sample average samples. Alternatively, time course multiple strains multiple timepoints, might important compare delta Cq values reference strain time point instead globally. comparisons can done little work using generic data-manipulation functions tidyverse, example dplyr::group_by. information help pages functions, ?calculate_deltacq_bysampleid ?calculate_deltadeltacq_bytargetid. specific question design isn’t covered functions , ’re welcome ask creating new issue tidyqpcr github site: https://github.com/ewallace/tidyqpcr/issues/.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/articles/multifactor_vignette.html","id":"summary-an-example-multifactorial-qpcr-experiment-","dir":"Articles","previous_headings":"","what":"Summary: an example multifactorial qPCR experiment.","title":"Multifactorial multi-plate qPCR analysis example","text":"vignette shows use tidyqpcr functions normalize plot data multifactorial experiments: many primer sets, many conditions, two plates. vignette advanced example complex data. real RT-qPCR data Edward Wallace June 2018, testing effect heat shock transcription-targeting drugs Saccharomyces cerevisiae yeast.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/articles/multifactor_vignette.html","id":"pilot-experiment","dir":"Articles","previous_headings":"Summary: an example multifactorial qPCR experiment.","what":"Pilot experiment","title":"Multifactorial multi-plate qPCR analysis example","text":"standard transcriptional inhibitors phenanthroline thiolutin block transcriptional heat shock response yeast? genuine question papers argue phenanthroline thiolutin induce transcriptional heat shock response. Measure 16 primer sets: HOR7, HSP12, HSP26, HSP78, HSP104, RTC3, SSA4, PGK1, ALG9, HHT2, HTB2, RPS3, RPS13, RPS15, RPS30A, RPL39. Test 6 conditions. ’s 3 transcriptional inhibitors (drug control, 150ug/mL 1,10-phenanthroline, 3ug/mL thiolutin) 2 conditions (- heat shock control, + heat shock 42C 10min), 2 biol reps :","code":"- *C-* Control -heat - *P-* Phenanthroline -heat - *T-* Thiolutin -heat - *C+* Control +heat - *P+* Phenanthroline +heat - *T+* Thiolutin +heat"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/multifactor_vignette.html","id":"setup-knitr-options-and-load-packages","dir":"Articles","previous_headings":"Summary: an example multifactorial qPCR experiment.","what":"Setup knitr options and load packages","title":"Multifactorial multi-plate qPCR analysis example","text":"","code":"# knitr options for report generation knitr::opts_chunk$set(   warning = FALSE, message = FALSE, echo = TRUE, cache = FALSE,   results = \"show\" )  # Load packages library(tidyr) library(ggplot2) library(dplyr) library(tidyqpcr)  # set default theme for graphics theme_set(theme_bw(base_size = 11) %+replace%   theme(     strip.background = element_blank()   ))"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/multifactor_vignette.html","id":"label-and-plan-plates","dir":"Articles","previous_headings":"Summary: an example multifactorial qPCR experiment.","what":"Label and plan plates","title":"Multifactorial multi-plate qPCR analysis example","text":"Reverse transcription random primers mixed oligo-dT. Display plate plan using display_plate_qpcr.  Note display_plate_qpcr requires column called sample_id, make condition variable using mutate(sample_id=condition). reason replicate samples condition different plates, assign unique sample name replicate loading plates together using unite next code chunk.","code":"# list target_ids of primer sets target_id_levels <- c(   \"HOR7\", \"HSP12\", \"HSP26\", \"HSP78\",   \"HSP104\", \"RTC3\", \"SSA4\", \"PGK1\",   \"ALG9\", \" HHT2\", \"HTB2\", \"RPS3\",   \"RPS13\", \"RPS15\", \"RPS30A\", \"RPL39\" )  rowkey <- tibble(   well_row = LETTERS[1:16],   target_id = factor(target_id_levels, levels = target_id_levels) )  # Set up experimental samples heat_levels <- c(\"-\", \"+\") heat_values <- factor(rep(heat_levels, each = 3), levels = heat_levels) drug_levels <- c(\"C\", \"P\", \"T\") drug_values <- factor(rep(drug_levels, times = 2), levels = drug_levels) condition_levels <- paste0(drug_levels, rep(heat_levels, each = 3)) condition_values <- factor(condition_levels, levels = condition_levels)  colkey <- create_colkey_6_in_24(   heat = heat_values,   drug = drug_values,   condition = condition_values )  plateplan <-   label_plate_rowcol(     create_blank_plate(well_row = LETTERS[1:16], well_col = 1:24),     rowkey, colkey   ) display_plate_qpcr(plateplan %>%   mutate(sample_id = condition))"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/multifactor_vignette.html","id":"load-and-summarize-data","dir":"Articles","previous_headings":"Summary: an example multifactorial qPCR experiment.","what":"Load and summarize data","title":"Multifactorial multi-plate qPCR analysis example","text":"","code":"# read my plate data, one at a time, with biol_rep and plate number  # NOTE: system.file() accesses data from this R package # To use your own data, remove the call to system.file(), # instead pass your data's filename to read_lightcycler_1colour_cq() # or to another relevant read_ function  file_path_cq_plate1 <- system.file(\"extdata\",               \"Edward_qPCR_TxnInhibitors_HS_2018-06-15_plate1_Cq.txt.gz\",               package = \"tidyqpcr\")  plate1 <- file_path_cq_plate1 %>%   read_lightcycler_1colour_cq() %>%   left_join(plateplan, by = \"well\") %>%   mutate(biol_rep = \"1\", plate = \"1\")  file_path_cq_plate2 <- system.file(\"extdata\",               \"Edward_qPCR_TxnInhibitors_HS_2018-06-15_plate2_Cq.txt.gz\",               package = \"tidyqpcr\")  plate2 <- file_path_cq_plate2 %>%   read_lightcycler_1colour_cq() %>%   left_join(plateplan, by = \"well\") %>%   mutate(biol_rep = \"2\", plate = \"2\")  # combine data from both plates into a single data frame plates <- bind_rows(plate1, plate2) %>%   unite(sample_id, condition, biol_rep, sep = \"\", remove = FALSE)  summary(plates) ##  include            color           well           sample_info        ##  Mode:logical   Min.   :  255   Length:768         Length:768         ##  TRUE:768       1st Qu.:  255   Class :character   Class :character   ##                 Median :  255   Mode  :character   Mode  :character   ##                 Mean   : 9738                                         ##                 3rd Qu.:  255                                         ##                 Max.   :65280                                         ##                                                                       ##        cq        concentration    standard  status           well_row   ##  Min.   : 3.11   Min.   : NA   Min.   :0   Mode:logical   A      : 48   ##  1st Qu.:15.92   1st Qu.: NA   1st Qu.:0   NA's:768       B      : 48   ##  Median :18.12   Median : NA   Median :0                  C      : 48   ##  Mean   :19.86   Mean   :NaN   Mean   :0                  D      : 48   ##  3rd Qu.:21.19   3rd Qu.: NA   3rd Qu.:0                  E      : 48   ##  Max.   :37.51   Max.   : NA   Max.   :0                  F      : 48   ##  NA's   :112     NA's   :768                              (Other):480   ##     well_col   prep_type tech_rep heat    drug     sample_id         condition ##  1      : 32   +RT:576   1:384    -:384   C:256   Length:768         C-:128    ##  2      : 32   -RT:192   2:192    +:384   P:256   Class :character   P-:128    ##  3      : 32             3:192            T:256   Mode  :character   T-:128    ##  4      : 32                                                         C+:128    ##  5      : 32                                                         P+:128    ##  6      : 32                                                         T+:128    ##  (Other):576                                                                   ##    target_id     biol_rep            plate           ##  HOR7   : 48   Length:768         Length:768         ##  HSP12  : 48   Class :character   Class :character   ##  HSP26  : 48   Mode  :character   Mode  :character   ##  HSP78  : 48                                         ##  HSP104 : 48                                         ##  RTC3   : 48                                         ##  (Other):480"},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/articles/multifactor_vignette.html","id":"rt-controls-are-low","dir":"Articles","previous_headings":"Plot unnormalized data","what":"-RT controls are low","title":"Multifactorial multi-plate qPCR analysis example","text":"","code":"ggplot(data = plates) +   geom_point(aes(x = target_id, y = cq, shape = condition, colour = condition),     position = position_jitter(width = 0.2, height = 0)   ) +   labs(     y = \"Cycle count to threshold\",     title = \"All reps, unnormalized\"   ) +   scale_shape_manual(values = c(15:18, 5:6)) +   facet_grid(biol_rep ~ prep_type) +   theme(     axis.text.x = element_text(angle = 90, vjust = 0.5),     panel.border = element_rect(       fill = NA, linetype = 1,       colour = \"grey50\", size = 0.5     )   )"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/multifactor_vignette.html","id":"normalize-cq-to-pgk1-within-sample-only","dir":"Articles","previous_headings":"Plot unnormalized data","what":"Normalize Cq to PGK1, within Sample only","title":"Multifactorial multi-plate qPCR analysis example","text":"","code":"platesnorm <- plates %>%   filter(prep_type == \"+RT\") %>%   calculate_deltacq_bysampleid(ref_target_ids = \"PGK1\")  platesmed <- platesnorm %>%   group_by(sample_id, condition, biol_rep, heat, drug, target_id) %>%   summarize(     delta_cq = median(delta_cq, na.rm = TRUE),     rel_abund = median(rel_abund, na.rm = TRUE)   )  filter(platesmed, target_id == \"HSP26\") ## # A tibble: 12 × 8 ## # Groups:   sample_id, condition, biol_rep, heat, drug [12] ##    sample_id condition biol_rep heat  drug  target_id delta_cq rel_abund ##    <chr>     <fct>     <chr>    <fct> <fct> <fct>        <dbl>     <dbl> ##  1 C+1       C+        1        +     C     HSP26       0.98      0.507  ##  2 C+2       C+        2        +     C     HSP26       1.58      0.334  ##  3 C-1       C-        1        -     C     HSP26       0.0700    0.953  ##  4 C-2       C-        2        -     C     HSP26       1.02      0.493  ##  5 P+1       P+        1        +     P     HSP26       1.60      0.330  ##  6 P+2       P+        2        +     P     HSP26       1.60      0.330  ##  7 P-1       P-        1        -     P     HSP26       2.53      0.173  ##  8 P-2       P-        2        -     P     HSP26       3.8       0.0718 ##  9 T+1       T+        1        +     T     HSP26       1.19      0.441  ## 10 T+2       T+        2        +     T     HSP26       2.06      0.240  ## 11 T-1       T-        1        -     T     HSP26       1.44      0.369  ## 12 T-2       T-        2        -     T     HSP26       3.02      0.123"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/multifactor_vignette.html","id":"plot-normalized-data-all-reps","dir":"Articles","previous_headings":"Plot unnormalized data","what":"Plot normalized data, all reps","title":"Multifactorial multi-plate qPCR analysis example","text":"","code":"ggplot(data = platesnorm) +   geom_point(aes(x = target_id,                  y = delta_cq,                  shape = condition,                  colour = condition),     position = position_jitter(width = 0.2, height = 0)   ) +   labs(y = \"Cq relative to PGK1\") +   scale_shape_manual(values = c(15:18, 5:6)) +   facet_grid(biol_rep ~ .) +   theme(     axis.text.x = element_text(angle = 90, vjust = 0.5),     panel.border = element_rect(       fill = NA, linetype = 1,       colour = \"grey50\", size = 0.5     )   )"},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/articles/multifactor_vignette.html","id":"all-on-same-axes","dir":"Articles","previous_headings":"Plot unnormalized data > Plot normalized data, summarized vs target_id","what":"All on same axes","title":"Multifactorial multi-plate qPCR analysis example","text":"plot shows summarized data axes, hard pick different conditions eye.","code":"ggplot(data = platesmed) +   geom_point(aes(x = target_id,                  y = rel_abund,                  shape = biol_rep,                  colour = condition),     position = position_jitter(width = 0.2, height = 0)   ) +   scale_shape_manual(values = c(15:18, 5:6)) +   scale_y_log10(\"mRNA relative detection\",                 labels = scales::label_number()) +   theme(axis.text.x = element_text(angle = 90, vjust = 0.5))"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/multifactor_vignette.html","id":"faceted-by-drug-treatment","dir":"Articles","previous_headings":"Plot unnormalized data > Plot normalized data, summarized vs target_id","what":"Faceted by drug treatment","title":"Multifactorial multi-plate qPCR analysis example","text":"plot shows summarized data “faceted” different axes different drug treatments. highlights , example, SSA4 detection increases response heat drug treatments.","code":"ggplot(data = platesmed) +   geom_point(aes(x = target_id, y = rel_abund, shape = biol_rep, colour = heat),     position = position_jitter(width = 0.2, height = 0)   ) +   facet_wrap(~drug, ncol = 3) +   scale_colour_manual(values = c(\"-\" = \"grey50\", \"+\" = \"red\")) +   scale_y_log10(\"mRNA relative detection\",                 labels = scales::label_number()) +   theme(axis.text.x = element_text(angle = 90, vjust = 0.5))"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/multifactor_vignette.html","id":"faceted-by-heat-shock-condition","dir":"Articles","previous_headings":"Plot unnormalized data > Plot normalized data, summarized vs target_id","what":"Faceted by heat shock condition","title":"Multifactorial multi-plate qPCR analysis example","text":"contrast, plot shows summarized data “faceted” different axes different conditions. shows clear response drug treatments either condition.","code":"ggplot(data = platesmed) +   geom_point(aes(x = target_id, y = rel_abund, shape = biol_rep, colour = drug),     position = position_jitter(width = 0.2, height = 0)   ) +   facet_wrap(~heat, ncol = 3) +   scale_y_log10(\"mRNA relative detection\",                 labels = scales::label_number()) +   theme(axis.text.x = element_text(angle = 90, vjust = 0.5))"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/multifactor_vignette.html","id":"melt-and-amplification-curves","dir":"Articles","previous_headings":"","what":"Melt and Amplification Curves","title":"Multifactorial multi-plate qPCR analysis example","text":"","code":"# NOTE: system.file() accesses data from this R package # To use your own data, remove the call to system.file(), # instead pass your data's filename to read_lightcycler_1colour_cq() # or to another relevant read_ function  file_path_raw_plate1 <- system.file(\"extdata/Edward_qPCR_TxnInhibitors_HS_2018-06-15_plate1.txt.gz\",               package = \"tidyqpcr\")  plate1curve <- file_path_raw_plate1 %>%     read_lightcycler_1colour_raw() %>%     debaseline() %>%     left_join(plateplan, by = \"well\") %>%     mutate(biol_rep = 1, plate = 1)  file_path_raw_plate2 <- system.file(\"extdata/Edward_qPCR_TxnInhibitors_HS_2018-06-15_plate2.txt.gz\",               package = \"tidyqpcr\")  plate2curve <- file_path_raw_plate2 %>%     read_lightcycler_1colour_raw() %>%     debaseline() %>%     left_join(plateplan, by = \"well\") %>%     mutate(biol_rep = 2, plate = 2)  platesamp <- bind_rows(plate1curve, plate2curve) %>%   filter(program_no == 2)  platesmelt <- bind_rows(plate1curve, plate2curve) %>%   filter(program_no == 3) %>%   calculate_drdt_plate() %>%   filter(temperature >= 61)"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/multifactor_vignette.html","id":"melt-curves-biol_rep-1","dir":"Articles","previous_headings":"Melt and Amplification Curves","what":"Melt Curves, biol_rep 1","title":"Multifactorial multi-plate qPCR analysis example","text":"","code":"ggplot(   data = platesmelt %>%     filter(tech_rep == 1, biol_rep == 1),   aes(x = temperature, y = dRdT, linetype = prep_type) ) +   facet_grid(condition ~ target_id) +   geom_line() +   scale_linetype_manual(values = c(\"-RT\" = \"dashed\", \"+RT\" = \"solid\")) +   scale_x_continuous(breaks = seq(60, 100, 10),                      minor_breaks = seq(60, 100, 5)) +   labs(title = \"Melt curves, biol. rep. 1, tech. rep. 1\") +   theme(panel.grid = element_blank())"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/multifactor_vignette.html","id":"melt-curves-biol_rep-2","dir":"Articles","previous_headings":"Melt and Amplification Curves","what":"Melt Curves, biol_rep 2","title":"Multifactorial multi-plate qPCR analysis example","text":"","code":"ggplot(   data = platesmelt %>%     filter(tech_rep == 1, biol_rep == 2),   aes(x = temperature, y = dRdT, linetype = prep_type) ) +   facet_grid(condition ~ target_id) +   geom_line() +   scale_linetype_manual(values = c(\"-RT\" = \"dashed\", \"+RT\" = \"solid\")) +   scale_x_continuous(breaks = seq(60, 100, 10),                      minor_breaks = seq(60, 100, 5)) +   labs(title = \"Melt curves, biol. rep. 2, tech. rep. 1\") +   theme(panel.grid = element_blank())"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/multifactor_vignette.html","id":"amp-curves-biol_rep-1","dir":"Articles","previous_headings":"Melt and Amplification Curves","what":"Amp Curves, biol_rep 1","title":"Multifactorial multi-plate qPCR analysis example","text":"","code":"ggplot(   data = platesamp %>%     filter(tech_rep == 1, biol_rep == 1),   aes(x = cycle, y = fluor_signal, linetype = prep_type) ) +   facet_grid(condition ~ target_id) +   geom_line() +   scale_linetype_manual(values = c(\"-RT\" = \"dashed\", \"+RT\" = \"solid\")) +   expand_limits(y = 0) +   labs(title = \"Amp. curves, biol. rep. 1, tech. rep. 1\") +   theme(panel.grid = element_blank()) ggplot(   data = platesamp %>%     filter(tech_rep == 1, biol_rep == 2),   aes(x = cycle, y = fluor_signal, linetype = prep_type) ) +   facet_grid(condition ~ target_id) +   geom_line() +   scale_linetype_manual(values = c(\"-RT\" = \"dashed\", \"+RT\" = \"solid\")) +   expand_limits(y = 0) +   labs(title = \"Amp. curves, biol. rep. 2, tech. rep. 1\") +   theme(panel.grid = element_blank())"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"vignette introduces set microwell plates tidyqpcr analysis. Start new-ish tidyverse want see explanations design experiments plate layouts. worked examples tidyqpcr analysis 96-well 384-well plates, see: Delta Cq 96-well plate qPCR analysis vignette, vignette(\"deltacq_96well_vignette\", package = \"tidyqpcr\") Primers Probes Calibration vignette, vignette(\"calibration_vignette\", package = \"tidyqpcr\") Multifactorial experiment vignette, vignette(\"multifactor_vignette\", package = \"tidyqpcr\") Setting plates partly technical question use functions tidyqpcr tidyverse, fundamentally question design experiment. recommend community-led best-practice MIQE guidelines: many replicates need, information need provide accompany analysis? suggest thinking whole experiment first, including measure, many replicates, figures want make. plan analysis even starting grow biological samples extract RNA/DNA, easier avoid mistakes. Also, steps cell growth, nucleic acid extraction measurement, finished figures, go much quicker. vignette builds 12-well “practice plate” 96 well plate plausible small RT-qPCR experiment. key idea design one replicate experiment small rectangle plate, make copies small rectangle across plate replicates complicated designs. goal working vignette, plate setup Multifactorial vignette easier follow. vignette focuses one primer set per well (SYBR data), doesn’t discuss one probe per well (TaqMan data). Please create issue tidyqpcr github repository data needs aren’t covered , try respond .","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"setup-knitr-options-and-load-packages","dir":"Articles","previous_headings":"Overview","what":"Setup knitr options and load packages","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"loads packages necessary rest code run.","code":"# knitr options for report generation knitr::opts_chunk$set(   warning = FALSE, message = FALSE, echo = TRUE, cache = FALSE,   results = \"show\" )  # Load packages library(tidyr) library(ggplot2) library(dplyr) library(tidyqpcr)"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"essential-information-target_id-sample_id-prep_type","dir":"Articles","previous_headings":"Overview","what":"Essential information: target_id, sample_id, prep_type","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"well plate measures one sequence targets one DNA/RNA sample. sample may duplicated different types preparation (e.g. reverse transcriptase enzyme controls). minimal information need describe plate specify target(s), sample, preparation type every well. , tidyqpcr expects plate plan minimum three pieces information per well: target_id, sample_id, prep_type. target_id uniquely identify primer set primer set/probe combination detect well. detecting multiple regions gene, trialing multiple probes primer sets, give different target_id names. chose name variable “target_id” make clear refer primer set, primer set/ probe combination, detecting single target sequence. Note current version tidyqpcr tested SYBR/intercalating dye data one primer set per well . sample_id uniquely identify nucleic acid sample experiment. sample_id can either describe relevant information, example HeatShock_10min_RepA, InputControl_WildType_Rep3; provide unique identifying information, example S013. Functions including display_plate_qpcr calculate_deltacq_bysampleid assume column called sample_id, use decide wells get analysed together. discuss add kinds information/metadata help analysis. prep_type used different types nucleic acid preps sample. Negative controls crucial, either template (NT) controls, specifically RNA-measuring RT-qPCR, -reverse transcriptase control detects DNA contamination, discussed MIQE guidelines. RT-qPCR experiments expect prep_types +RT -RT sample, primer calibration always template control. Technical replicates also necessary qPCR experiments track variability. occurs multiple wells, combination target_id, sample_id, prep_type.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"using-rows-and-columns-to-make-life-easier","dir":"Articles","previous_headings":"Overview","what":"Using rows and columns to make life easier","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"Technically, tidyqpcr can cope combination target sample well. long information associated clearly, later analysis work fine. However, good systematic designs interpretable people () computer less error prone. One systematic approach row measure exactly one target column one sample. vice versa: one row per sample, one column per target. advantage straightforward load multichannel pipette. tidyqpcr setup make easy specify column contents colkey, row contents rowkey, combine plan entire plate sub-region plate.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"a-minimal-48-well-plate-plan","dir":"Articles","previous_headings":"","what":"A Minimal 48-well plate plan","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"Let’s imagine performing RT-qPCR experiment measuring: Primer sets 4 genes: ACT1, BFG2, CDC19, DED1. Three biological replicates: rep1, rep2, rep3 Three technical replicates +RT one -RT need 4 * 3 * 4 = 48 wells experiment. Let’s put information 48 wells 96-well plate.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"practice-version-only-a-single-technical-replicate-","dir":"Articles","previous_headings":"A Minimal 48-well plate plan","what":"Practice version, only a single technical replicate.","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"use function tibble make rowkey data tibble, function rep repeat target_id information enough times fill plate. functions imported tidyqpcr; access help files directly ?tibble ?rep R session. use built-constant LETTERS label well row (well_row) letters D, like labeled standard 96-well plate. Similarly, put sample information tibble columns, including well_col column name hold information blank plate, information row column well, tidyqpcr function create_blank_plate: Access help also ?create_blank_plate. Note default functions make 96-well, 384-well, 1536-well blank plates, can customise . Now create 12-well mini-plate, using label_plate_rowcol function combine information blank plate template, rowkey, column key. visualise plate plan using display_plate_qpcr function:  Expanding practice plan incorporate replicates can done taking little rectangle making copies across larger plate. strategy making copies small rectangle makes easier use multichannel pipettes speed plate loading. also means technical replicates sample adjacent wells plate, correcting location-specific artefacts amplification qPCR machine. However, row- column-specific artefacts, approach allow detect separately.","code":"target_id_levels <- c(\"ACT1\", \"BFG2\", \"CDC19\", \"DED1\")  rowkey4 <- tibble(   well_row = LETTERS[1:4],   target_id = target_id_levels ) print(rowkey4) ## # A tibble: 4 × 2 ##   well_row target_id ##   <chr>    <chr>     ## 1 A        ACT1      ## 2 B        BFG2      ## 3 C        CDC19     ## 4 D        DED1 sample_id_levels <- c(\"rep1\", \"rep2\", \"rep3\") prep_type_levels <- \"+RT\"  colkey3 <- tibble(   well_col = 1:3,   sample_id = sample_id_levels,   prep_type = prep_type_levels ) print(colkey3) ## # A tibble: 3 × 3 ##   well_col sample_id prep_type ##      <int> <chr>     <chr>     ## 1        1 rep1      +RT       ## 2        2 rep2      +RT       ## 3        3 rep3      +RT create_blank_plate(well_row = LETTERS[1:4], well_col = 1:3) ## # A tibble: 12 × 3 ##    well  well_row well_col ##    <chr> <fct>    <fct>    ##  1 A1    A        1        ##  2 A2    A        2        ##  3 A3    A        3        ##  4 B1    B        1        ##  5 B2    B        2        ##  6 B3    B        3        ##  7 C1    C        1        ##  8 C2    C        2        ##  9 C3    C        3        ## 10 D1    D        1        ## 11 D2    D        2        ## 12 D3    D        3 plate_plan12 <- label_plate_rowcol(   plate = create_blank_plate(well_row = LETTERS[1:4], well_col = 1:3),   rowkey = rowkey4,   colkey = colkey3 )  print(plate_plan12) ## # A tibble: 12 × 6 ##    well  well_row well_col sample_id prep_type target_id ##    <chr> <fct>    <fct>    <chr>     <chr>     <chr>     ##  1 A1    A        1        rep1      +RT       ACT1      ##  2 A2    A        2        rep2      +RT       ACT1      ##  3 A3    A        3        rep3      +RT       ACT1      ##  4 B1    B        1        rep1      +RT       BFG2      ##  5 B2    B        2        rep2      +RT       BFG2      ##  6 B3    B        3        rep3      +RT       BFG2      ##  7 C1    C        1        rep1      +RT       CDC19     ##  8 C2    C        2        rep2      +RT       CDC19     ##  9 C3    C        3        rep3      +RT       CDC19     ## 10 D1    D        1        rep1      +RT       DED1      ## 11 D2    D        2        rep2      +RT       DED1      ## 12 D3    D        3        rep3      +RT       DED1 display_plate_qpcr(plate_plan12)"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"replicate-columns-for-the-sample_ids-and-prep_types","dir":"Articles","previous_headings":"A Minimal 48-well plate plan","what":"Replicate columns for the sample_ids and prep_types","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"putting three technical replicates +RT one -RT sample. approach reliable DNA contamination -RT samples show multiple sample/target combinations. achieve replicates plate plan explicitly writing every time c(\"+RT\", \"+RT\", \"+RT\", \"-RT\"), can use rep function. , use rep(\"+RT\", times = 9) make 9 repeats, meaning 3 technical replicates 3 +RT samples next . use concatenate function c, arrange next single replicates 3 -RT samples.","code":"sample_id_levels <- c(\"rep1\", \"rep2\", \"rep3\") prep_type_values <- c(rep(\"+RT\", times = 9), rep(\"-RT\", times = 3)) print(prep_type_values) ##  [1] \"+RT\" \"+RT\" \"+RT\" \"+RT\" \"+RT\" \"+RT\" \"+RT\" \"+RT\" \"+RT\" \"-RT\" \"-RT\" \"-RT\" colkey12 <- tibble(   well_col = 1:12,   sample_id = rep(sample_id_levels, times = 4),   prep_type = prep_type_values ) print(colkey12) ## # A tibble: 12 × 3 ##    well_col sample_id prep_type ##       <int> <chr>     <chr>     ##  1        1 rep1      +RT       ##  2        2 rep2      +RT       ##  3        3 rep3      +RT       ##  4        4 rep1      +RT       ##  5        5 rep2      +RT       ##  6        6 rep3      +RT       ##  7        7 rep1      +RT       ##  8        8 rep2      +RT       ##  9        9 rep3      +RT       ## 10       10 rep1      -RT       ## 11       11 rep2      -RT       ## 12       12 rep3      -RT"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"putting-the-48-well-sample-together","dir":"Articles","previous_headings":"A Minimal 48-well plate plan","what":"Putting the 48-well sample together","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"visualise plate plan using display_plate_qpcr function","code":"plate_plan48 <- label_plate_rowcol(   plate = create_blank_plate(well_row = LETTERS[1:4], well_col = 1:12),   rowkey = rowkey4,   colkey = colkey12 )  print(plate_plan48) ## # A tibble: 48 × 6 ##    well  well_row well_col sample_id prep_type target_id ##    <chr> <fct>    <fct>    <chr>     <chr>     <chr>     ##  1 A1    A        1        rep1      +RT       ACT1      ##  2 A2    A        2        rep2      +RT       ACT1      ##  3 A3    A        3        rep3      +RT       ACT1      ##  4 A4    A        4        rep1      +RT       ACT1      ##  5 A5    A        5        rep2      +RT       ACT1      ##  6 A6    A        6        rep3      +RT       ACT1      ##  7 A7    A        7        rep1      +RT       ACT1      ##  8 A8    A        8        rep2      +RT       ACT1      ##  9 A9    A        9        rep3      +RT       ACT1      ## 10 A10   A        10       rep1      -RT       ACT1      ## # ℹ 38 more rows display_plate_qpcr(plate_plan48)"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"adding-more-samples-and-repeating-targets","dir":"Articles","previous_headings":"","what":"Adding more samples and repeating targets","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"want measure one condition, beyond replicates? example, control treatment compared drug treatment, change nutrient conditions? can achieve extending “copied rectangle” approach include second condition.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"adding-experimental-conditions","dir":"Articles","previous_headings":"Adding more samples and repeating targets","what":"Adding experimental conditions","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"example, let us explicitly. rowkey can use rep function measure target conditions Ctrl Drug, repeating 4 times.","code":"condition_levels <- c(\"Ctrl\", \"Drug\") condition_values <- rep(condition_levels, each = 4) print(condition_values) ## [1] \"Ctrl\" \"Ctrl\" \"Ctrl\" \"Ctrl\" \"Drug\" \"Drug\" \"Drug\" \"Drug\""},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"repeating-target-names-without-repeating-yourself","dir":"Articles","previous_headings":"Adding more samples and repeating targets","what":"Repeating target names without repeating yourself","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"also use function rep repeat target_id information 4 times, fill plate. , ask help using ?rep. Now combine rowkey:","code":"target_id_levels <- c(\"ACT1\", \"BFG2\", \"CDC19\", \"DED1\") target_id_values <- rep(target_id_levels, times = 2) print(target_id_values) ## [1] \"ACT1\"  \"BFG2\"  \"CDC19\" \"DED1\"  \"ACT1\"  \"BFG2\"  \"CDC19\" \"DED1\" rowkey8 <- tibble(   well_row = LETTERS[1:8],   target_id = target_id_values,   condition = condition_values ) print(rowkey8) ## # A tibble: 8 × 3 ##   well_row target_id condition ##   <chr>    <chr>     <chr>     ## 1 A        ACT1      Ctrl      ## 2 B        BFG2      Ctrl      ## 3 C        CDC19     Ctrl      ## 4 D        DED1      Ctrl      ## 5 E        ACT1      Drug      ## 6 F        BFG2      Drug      ## 7 G        CDC19     Drug      ## 8 H        DED1      Drug"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"recreating-the-column-key","dir":"Articles","previous_headings":"Adding more samples and repeating targets","what":"Recreating the column key","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"make plate, also need column key. ’s changed , sample needs refer condition biological replicate. kept colkey12 , variable sample_id longer point uniquely single sample.","code":"biol_rep_levels <- c(\"rep1\", \"rep2\", \"rep3\")  colkey12_twocondition <- tibble(   well_col = 1:12,   biol_rep = rep(biol_rep_levels, times = 4),   prep_type = prep_type_values ) print(colkey12_twocondition) ## # A tibble: 12 × 3 ##    well_col biol_rep prep_type ##       <int> <chr>    <chr>     ##  1        1 rep1     +RT       ##  2        2 rep2     +RT       ##  3        3 rep3     +RT       ##  4        4 rep1     +RT       ##  5        5 rep2     +RT       ##  6        6 rep3     +RT       ##  7        7 rep1     +RT       ##  8        8 rep2     +RT       ##  9        9 rep3     +RT       ## 10       10 rep1     -RT       ## 11       11 rep2     -RT       ## 12       12 rep3     -RT"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"combining-information-into-a-larger-plate-plan","dir":"Articles","previous_headings":"Adding more samples and repeating targets","what":"Combining information into a larger plate plan","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"Now put together plan whole 96-well plate: change create_blank_plate call include 8 rows.","code":"plate_plan96_take1 <- label_plate_rowcol(   plate = create_blank_plate(well_row = LETTERS[1:8], well_col = 1:12),   rowkey = rowkey8,   colkey = colkey12_twocondition )  print(plate_plan96_take1) ## # A tibble: 96 × 7 ##    well  well_row well_col biol_rep prep_type target_id condition ##    <chr> <fct>    <fct>    <chr>    <chr>     <chr>     <chr>     ##  1 A1    A        1        rep1     +RT       ACT1      Ctrl      ##  2 A2    A        2        rep2     +RT       ACT1      Ctrl      ##  3 A3    A        3        rep3     +RT       ACT1      Ctrl      ##  4 A4    A        4        rep1     +RT       ACT1      Ctrl      ##  5 A5    A        5        rep2     +RT       ACT1      Ctrl      ##  6 A6    A        6        rep3     +RT       ACT1      Ctrl      ##  7 A7    A        7        rep1     +RT       ACT1      Ctrl      ##  8 A8    A        8        rep2     +RT       ACT1      Ctrl      ##  9 A9    A        9        rep3     +RT       ACT1      Ctrl      ## 10 A10   A        10       rep1     -RT       ACT1      Ctrl      ## # ℹ 86 more rows"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"making-sure-sample-names-are-present-and-unique","dir":"Articles","previous_headings":"Adding more samples and repeating targets","what":"Making sure sample names are present and unique","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"plate plan lacks sample_id column, however. fact example sample_id information rowkey (condition) comes column key (biological replicate). unite information, conveniently use unite function tidyr package: , check help file ?unite. line unite(sample_id, condition, biol_rep, remove = FALSE) means create new variable sample_id existing variables condition biol_rep, remove = FALSE means keep original variables table well. syntax %>% magrittr package way chain functions together. Now display plate check everything place:  print plate map take lab visual aid plate loading.","code":"plate_plan96 <- label_plate_rowcol(   plate = create_blank_plate(well_row = LETTERS[1:8], well_col = 1:12),   rowkey = rowkey8,   colkey = colkey12_twocondition ) %>%   unite(sample_id, condition, biol_rep, remove = FALSE)  print(plate_plan96) ## # A tibble: 96 × 8 ##    well  well_row well_col sample_id biol_rep prep_type target_id condition ##    <chr> <fct>    <fct>    <chr>     <chr>    <chr>     <chr>     <chr>     ##  1 A1    A        1        Ctrl_rep1 rep1     +RT       ACT1      Ctrl      ##  2 A2    A        2        Ctrl_rep2 rep2     +RT       ACT1      Ctrl      ##  3 A3    A        3        Ctrl_rep3 rep3     +RT       ACT1      Ctrl      ##  4 A4    A        4        Ctrl_rep1 rep1     +RT       ACT1      Ctrl      ##  5 A5    A        5        Ctrl_rep2 rep2     +RT       ACT1      Ctrl      ##  6 A6    A        6        Ctrl_rep3 rep3     +RT       ACT1      Ctrl      ##  7 A7    A        7        Ctrl_rep1 rep1     +RT       ACT1      Ctrl      ##  8 A8    A        8        Ctrl_rep2 rep2     +RT       ACT1      Ctrl      ##  9 A9    A        9        Ctrl_rep3 rep3     +RT       ACT1      Ctrl      ## 10 A10   A        10       Ctrl_rep1 rep1     -RT       ACT1      Ctrl      ## # ℹ 86 more rows display_plate_qpcr(plate_plan96)"},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"creating-plate-layouts-with-standard-designs","dir":"Articles","previous_headings":"","what":"Creating plate layouts with standard designs","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"tidyqpcr functions provide shortcuts create plate layouts standard designs: create_colkey_6_in_24() create_colkey_4diln_2ctrl_in_24() create_colkey_6diln_2ctrl_in_24() create_rowkey_4_in_16() create_rowkey_8_in_16_plain() focus setting column keys row keys 384-well plates samples repeated blocks 4, 6 8. specialised primer calibration, including serial dilution control samples. functions can adapted needs. example, default levels prep_type relevant RT-qPCR, want change plain qPCR ChIP-qPCR. Please consult function documentation details parameters outputs, e.g. ?create_colkey_6_in_24. examples standard layouts use, see vignettes: Primers Probes Calibration vignette, vignette(\"calibration_vignette\", package = \"tidyqpcr\") Multifactorial experiment vignette, vignette(\"multifactor_vignette\", package = \"tidyqpcr\")","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"what-information-goes-in-the-plate-plan-revisited","dir":"Articles","previous_headings":"","what":"What information goes in the plate plan, revisited?","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"plate plan contain: information need identify sample target/probe/primer set uniquely. Everything might want plot compare outputs. example, suppose testing multiple primer sets target, favourite gene YFG1, primer sets , B, C. might want variable called Gene value YFG1 , addition variable target_id levels YFG1_A, YFG1_B, YFG1_C. package, tidyqpcr, builds flexible approaches available tidyverse family packages. presented example specifying individual parts information sample, uniting tidyr function unite. ’s also inverse , separate: example samples three strains grown two temperatures timepoints multiple biological replicates, might specify sample_id WT_25C_10min_rep1, use separate(col = sample_id, = c(\"strain\", \"temperature\", \"time_min\", \"biol_rep\"), remove = FALSE) create individual columns copies information. key consistent make descriptions human-readable also computer-readable: human-readable sanity, computer-readable analysis runs automatically correctly. functions unite separate visual descriptions RStudio data wrangling cheat sheat. Another useful tidyr function crossing, creates table combinations variables supply, say want measure strains conditions.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/articles/platesetup_vignette.html","id":"hints-and-tips-on-plate-setup","dir":"Articles","previous_headings":"","what":"Hints and Tips on Plate setup","title":"Introduction to designing an experiment and setting up a plate plan in tidyqpcr","text":"tidyqpcr chose give variables snake_case names, sample_id, prep_type, following tidyverse style guide. loading 384-well plate fixed-spacing multichannel pipette loads every second row? want set plate plan load sample_id/target_id two adjacent rows, using rep(sample_id, = 2) might help. experiment spans multiple plates, can helpful re-use colkey rowkey defining similar plate plans. re-use entire plate plan plates exact replicates, long ensure sample_id name includes replicate information unique analysis. want avoid certain rows columns, change well_row well_col arguments blank plates, row keys, column keys. example create_blank_plate(well_row = LETTERS[2:7], well_col = 2:11) creates blank 96-well plate outside rows columns empty. want data display preferred order, make factor. “Factor” name R data fixed known set possible values. R calls possible values, “levels”. list pets might levels: “cat”, “dog”, “hamster”. pets might values c(\"cat\", \"cat\", \"cat\", \"dog\"). goes target genes, sample ids, growth conditions. vignette tried distinguish “levels” “values” code examples. learn factors, see chapter factors R Data Science (Wickham & Grolemund)","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edward Wallace. Author, maintainer. Sam Haynes. Author.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Haynes, S., Wallace, E.W.J. (2021). tidyqpcr R Package: Quantitative PCR analysis tidyverse (Version 0.3) [Software]. Available https://github.com/ewallace/tidyqpcr.","code":"@Misc{,   title = {The tidyqpcr R Package: Quantitative PCR analysis in the tidyverse.},   author = {{Edward Wallace} and {Sam Haynes}},   year = {2021},   url = {https://github.com/ewallace/tidyqpcr}, }"},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"tidyqpcr---quantitative-pcr-analysis-in-the-tidyverse","dir":"","previous_headings":"","what":"Quantitative PCR Analysis with the Tidyverse","title":"Quantitative PCR Analysis with the Tidyverse","text":"Empowering scientists conduct reproducible, flexible, MIQE best-practice compliant quantitative PCR analysis.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"contents","dir":"","previous_headings":"","what":"Contents","title":"Quantitative PCR Analysis with the Tidyverse","text":"Empowering Reproducible Flexible Best-practice compliant Installing tidyqpcr Using tidyqpcr News - see NEWS.md Current features Future priorities Contribute","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Quantitative PCR Analysis with the Tidyverse","text":"Quantitative Polymerase Chain Reaction (qPCR) highly adaptable experimental technique used across biology medicine measure amounts nucleic acids (DNA RNA). tidyqpcr software package qPCR data analysis builds tidyverse collection data science tools R programming language.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"empowering","dir":"","previous_headings":"","what":"Empowering","title":"Quantitative PCR Analysis with the Tidyverse","text":"tidyqpcr combines free, open-source qPCR analysis R package online teaching materials. want users able know understand happens every step analysis. Users able know occurs step tidyqpcr tools open source follow FAIR principles - Findable, Accessible, Interoperable, Reusable. Users also find step understandable aim produce educational resources extensions data carpentry workshops, Data Analysis Visualization R Ecologists, accessible beginner programmers.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"reproducible","dir":"","previous_headings":"","what":"Reproducible","title":"Quantitative PCR Analysis with the Tidyverse","text":"tidyqpcr scripts produce paper-ready figures straight raw data identical results across computers. want promote reproducible research collaborators, reviewers students can easily confirm extend results conclusions. tidyqpcr analysis repeat exactly different computers, enabling scientists share raw data analysis scripts rather just processed figures. R R markdown script using tidyqpcr analyse set qPCR data directly uploaded repository figshare, encouraged many journal publishers.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"flexible","dir":"","previous_headings":"","what":"Flexible","title":"Quantitative PCR Analysis with the Tidyverse","text":"tidyqpcr follows ‘tidy’ data paradigm ensure scalability adaptability. want create tool flexible enough analyse high low throughput experimental data whilst integrating easily data analyses. tidyqpcr uses powerful generic data science tools tidyverse R package, lightly overlaid qPCR-specific scripts. far possible, every object tidyqpcr stored generic tibble / data frame. Manipulating plotting qPCR data without creating bespoke data structures allows tidyqpcr scripts easily integrated scaled according needs experiments.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"best-practice-compliant","dir":"","previous_headings":"","what":"Best-practice compliant","title":"Quantitative PCR Analysis with the Tidyverse","text":"tidyqpcr encourages standardised, reliable experimental design following Minimum Information Publication Quantitative Real-Time PCR Experiments (MIQE) best practices. want make easier scientists produce reliable interpretable results. MIQE best practices framework facilitate full disclosure reagents, sequences, analysis methods necessary enable investigators reproduce results. final version tidyqpcr , default, request relevant experimental conditions assay characteristics, described MIQE guidelines, allow reviewers/readers rigorously assess validity result. See “Future Priorities” get updates tidyqpcr’s MIQE compliant features.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"installing-tidyqpcr","dir":"","previous_headings":"","what":"Installing tidyqpcr","title":"Quantitative PCR Analysis with the Tidyverse","text":"First install R.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"for-windows-users","dir":"","previous_headings":"Installing tidyqpcr","what":"For Windows users","title":"Quantitative PCR Analysis with the Tidyverse","text":"Next, need working installation Rtools. Jeffrey Leek made slides installation testing Rtools.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"install-via-devtools-for-all-r-users","dir":"","previous_headings":"Installing tidyqpcr","what":"Install via devtools (for all R users)","title":"Quantitative PCR Analysis with the Tidyverse","text":"Install devtools R package, see devtools installation instructions. Note older versions remotes package automatically convert warnings errors installation. Please update remotes package >2.3.0 order remove default. load tidyqpcr standard package: Note tidyqpcr automatically imports loads several external packages basic functionality, including; tidy, dplyr ggplot2. allows tidyqpcr used immediately may cause NAMESPACE clashes user already many package libraries loaded. Restarting R session loading tidyqpcr separately may solve issues.","code":"library(devtools) devtools::install_github(\"ropensci/tidyqpcr\", build_vignettes = TRUE)  ## Alternatively, install without building the vignettes  ## (Not recommended as vignettes contain the tutorials on using tidyqpcr) devtools::install_github(\"ropensci/tidyqpcr\") library(tidyqpcr)"},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"using-tidyqpcr","dir":"","previous_headings":"","what":"Using tidyqpcr","title":"Quantitative PCR Analysis with the Tidyverse","text":"best place start viewing articles tidyqpcr website. find vignettes, offer tutorials example data analyses including figures. Currently 4 vignettes: IntroDesignPlatesetup - Introduction designing experiment setting plate plan tidyqpcr. DeltaCq96wellExample - Example analysis 96-well RT-qPCR data including relative quantification delta Cq, real experiment. MultifactorialExample - Example design analysis (real) multifactorial RT-qPCR experiment. PrimerCalibration - Example design analysis calibrating qPCR primer sets (real) experimental test find R session, enter browseVignettes(package=\"tidyqpcr\"). Individual R functions also documented, use R’s standard help system loading package, e.g. ?create_blank_plate. see list functions links help pages use help(package=\"tidyqpcr\"). basic use case designing 12 well plate given , see IntroDesignPlatesetup details.","code":"rowkey4 <- tibble(   well_row = LETTERS[1:4],   target_id = c(\"ACT1\", \"BFG2\", \"CDC19\", \"DED1\") )   colkey3 <- tibble(   well_col = 1:3,   sample_id = c(\"rep1\", \"rep2\", \"rep3\"),   prep_type = \"+RT\" )  create_blank_plate(well_row = LETTERS[1:4], well_col = 1:3)  plate_plan12 <- label_plate_rowcol(   plate = create_blank_plate(well_row = LETTERS[1:4], well_col = 1:3),   rowkey = rowkey4,   colkey = colkey3 )  display_plate_qpcr(plate_plan12)"},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"status","dir":"","previous_headings":"","what":"Status","title":"Quantitative PCR Analysis with the Tidyverse","text":"June 2022, software fully useable, active development. particularly good designing qPCR experiments microwell plates (96-well 384-well), relative quantification delta Cq method. Edward Wallace wrote basic functions documentation needed qPCR analysis Wallace lab, started building R package. Sam Haynes actively developing, initially part eLife Open Innovation Leaders programme 2020. feature need work, please ask us!","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Quantitative PCR Analysis with the Tidyverse","text":"tidyqpcr can used analyse qPCR data nucleic acid source - DNA qPCR ChIP-qPCR, RNA RT-qPCR. Currently tidyqpcr functions support relative quantification delta Cq method, yet absolute quantification.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"current-features","dir":"","previous_headings":"","what":"Current features","title":"Quantitative PCR Analysis with the Tidyverse","text":"every object tibble / data frame, special data classes learn lay display 96/384-well plates easy experimental setup (label_plate_rowcol, create_blank_plate, …). consistently describe samples target amplicons reserved variable names (sample_id, target_id). flexibly assign metadata samples visualisation ggplot2 (see vignettes). read quantification cycle (Cq) raw data Roche LightCycler machines single-channel fluorescence (read_lightcycler_1colour_cq, read_lightcycler_1colour_raw). calibration primer sets including estimating efficiencies visualization curves (calculate_efficiency, see vignettes) visualization amplification melt curves (calculate_drdt_plate, see vignettes) delta Cq: normalization/ relative quantification Cq data one reference targets delta count method (calculate_normcq, calculate_deltacq_bysampleid) delta delta Cq: normalization delta Cq data across multiple samples (calculate_deltadeltacq_bytargetid)","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"future-priorities","dir":"","previous_headings":"","what":"Future priorities","title":"Quantitative PCR Analysis with the Tidyverse","text":"including primer efficiencies quantification open-source tested Cq calculation function, amplification curves multi-colour (hydrolysis probe) detection extend 1536-well plates metadata handling compatible RDML format files automatic plate loading Opentrons Labcyte Echo liquid handlers.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"comparison-of-qpcr-r-packages-with-respect-to-the-miqe-guidelines","dir":"","previous_headings":"","what":"Comparison of qPCR R packages with respect to the MIQE guidelines","title":"Quantitative PCR Analysis with the Tidyverse","text":"Table package features corresponding essential information qPCR validation data analysis, outlined MIQE guidelines publication qPCR results. Note: - Yes means package includes functionality complete analysis. - Yes + Docs means step explicitly shown either function documentation vignette. - † means package lacks explicit functionality, generic R capabilities statistical testing can applied data. - ‡ Linear dynamic range limit detection (LOD) calculations enabled packages additional short scripted analyses well-designed experiment, functionality specifically documented.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"Quantitative PCR Analysis with the Tidyverse","text":"delighted work answer questions, add features, fix problems. Please file issue email Edward dot Wallace University email address, (ed.ac.uk).","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Quantitative PCR Analysis with the Tidyverse","text":"package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"how-to-contribute-code-style-checking-development-cycle","dir":"","previous_headings":"","what":"How to contribute code: style, checking, development cycle","title":"Quantitative PCR Analysis with the Tidyverse","text":"want fix bugs add features , ’s great. tidyqpcr development aims follow best practices outlined CONTRIBUTING.md file .github folder.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/index.html","id":"thank-you","dir":"","previous_headings":"","what":"Thank you","title":"Quantitative PCR Analysis with the Tidyverse","text":"Many thanks everyone helped tidyqpcr Users interviewees: Jamie Auxillos, Rosey Bayne, Liz Hughes, Rachael Murray, Elliott Chapman, Laura Tuck, Amy Newell, David Barrass, Christopher Katanski, Magnus Gwynne Stuart McKeller. Reviewers: @seaaan, @kelshmo @jooolia","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/paper.html","id":null,"dir":"","previous_headings":"","what":"Summary","title":"Summary","text":"Quantitative polymerase chain reaction (qPCR) fundamental technique molecular biology detect quantify DNA RNA. present tidyqpcr software package user-friendly qPCR analysis using tidyverse suite R packages. tidyqpcr offers consistent user interface structure qPCR analysis, within tidyverse paradigm spreadsheet-like rectangular data frames generic functions build complex analyses series simple steps. tidyqpcr focuses experimental design microwell plates, relative quantification using changes quantification cycle (ΔCq). Overall, tidyqpcr empowers scientists conduct reproducible, flexible, best-practice compliant quantitative PCR analysis.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/paper.html","id":"statement-of-need","dir":"","previous_headings":"","what":"Statement of need","title":"Summary","text":"Quantitative PCR among common techniques biological biomedical research, used quantification DNA RNA. critical need rigorous analysis reporting qPCR experiments, codified minimum information publication quantitative real-time PCR experiments (MIQE) guidelines [@Bustin:2009]. Yet common qPCR analysed either closed-source software supplied manufacturers PCR machines, highly variable, -house analysis scripts peer-reviewed. package, tidyqpcr, addresses need qPCR analysis package fully integrates user-friendly tidyverse, encourages use MIQE best-practice compliant experimental design, provides detailed example analysis pipelines R vignettes. Following tidy data paradigm integrates tidyqpcr wider collection data analysis packages provided tidyverse, accessible novice users R. open-source libraries qPCR analysis available distinct aims. HTqPCR [@Dvinge:2009], ReadqPCR/NormqPCR [@Perkins:2012], qpcR [@Spiess:2018] similar respects greater functionality tidyqpcr, follow object oriented approaches specialised data objects. contrast, pcr [@Ahmed:2018] aligns closely tidyqpcr function inputs tidy data frames. Although alternatives available, tidyqpcr’s aims approach distinct: improve quality qPCR experiments plate design analysis, exposing data consistent tidy format integrates tidyverse. tidyqpcr aims : Empowering: tidyqpcr combines free, open-source qPCR analysis R package online teaching materials. Reproducible: tidyqpcr scripts produce paper-ready figures straight raw data identical results across computers. Flexible: tidyqpcr follows ‘tidy’ data paradigm ensure scalability adaptability. Best-practice compliant: tidyqpcr encourages standardised, reliable experimental design prioritising MIQE-compliant best practices. tidyqpcr can used analyse qPCR data nucleic acid source - DNA qPCR ChIP-qPCR, RNA RT-qPCR. Currently tidyqpcr functions explicitly support relative quantification ΔCq method, yet absolute quantification. tidyqpcr’s current features allow users : use single data type analysis every object tibble / data frame. lay display 96/384-well plates easy experimental setup (label_plate_rowcol, create_blank_plate, …). consistently describe samples target amplicons reserved variable names (sample_id, target_id). flexibly assign metadata samples visualisation ggplot2 (see vignettes). read quantification cycle (Cq) raw data Roche LightCycler machines single-channel fluorescence (read_lightcycler_1colour_cq, read_lightcycler_1colour_raw). calibrate primer sets including estimating efficiencies visualization curves (calculate_efficiency). visualize amplification melt curves (calculate_drdt_plate) perform normalisation relative quantification one reference targets ΔCq method (calculate_normcq, calculate_deltacq_bysampleid). estimate differential expression across multiple samples ΔΔCq method (calculate_deltadeltacq_bytargetid). accelerate downstream analysis visualization writing tidy data frames fully compatible tidyverse suite. conducted series user interviews improve tidyqpcr’s capabilities documentation. ease--use documentation tidyqpcr enable efficient best-practice analysis qPCR data novice experienced programmers.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/paper.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Summary","text":"thank everyone eLife Innovation Leaders 2020 program help developing tidyqpcr, particular program leader Emmy Tsang mentor Aidan Budd. thank Sander Granneman, Stefanie Butland Sean Hughes feedback encouragement. thank rOpenSci, Julia Gustavsen, Kelsey Montgomery constructive reviews. thank participated interviews, including; Flic Anderson, Jamie Auxillos, David Barrass, Rosey Bayne, Elliott Chapman, Magnus Gwynne, Liz Hughes, Chris Katanski Stuart McKellar. Edward Wallace Sir Henry Dale Fellow, jointly funded Wellcome Royal Society [208779/Z/17/Z]. Samuel Haynes funded EASTBIO UKRI-BBSRC DTP [BB/M010996/1].","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_deltacq_bysampleid.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate delta cq (\\(\\Delta Cq\\)) to normalize quantification cycle\n(log2-fold) data within sample_id. — calculate_deltacq_bysampleid","title":"Calculate delta cq (\\(\\Delta Cq\\)) to normalize quantification cycle\n(log2-fold) data within sample_id. — calculate_deltacq_bysampleid","text":"function implements relative quantification delta Cq method. sample, Cq values targets (e.g. genes, probes, primer sets) compared one reference target ids specified `ref_target_ids`.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_deltacq_bysampleid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate delta cq (\\(\\Delta Cq\\)) to normalize quantification cycle\n(log2-fold) data within sample_id. — calculate_deltacq_bysampleid","text":"","code":"calculate_deltacq_bysampleid(cq_df, ref_target_ids, norm_function = median)"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_deltacq_bysampleid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate delta cq (\\(\\Delta Cq\\)) to normalize quantification cycle\n(log2-fold) data within sample_id. — calculate_deltacq_bysampleid","text":"cq_df data frame containing columns `sample_id`, value_name (default `cq`) tid_name (default `target_id`). Crucially, sample_id different technical replicates measuring identical reactions different wells plate, differ different biological experimental replicates. See tidyqpcr vignettes examples. ref_target_ids names targets normalize , .e. reference genes, hydrolysis probes, primer sets. can one reference target id, selection multiple target ids, even measured target ids. case , delta Cq value calculated relative median (`norm_function`) measured targets. norm_function Function use calculate value normalize given scale. Default median, alternatively use mean.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_deltacq_bysampleid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate delta cq (\\(\\Delta Cq\\)) to normalize quantification cycle\n(log2-fold) data within sample_id. — calculate_deltacq_bysampleid","text":"data frame like cq_df three additional columns:","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_deltacq_bysampleid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate delta cq (\\(\\Delta Cq\\)) to normalize quantification cycle\n(log2-fold) data within sample_id. — calculate_deltacq_bysampleid","text":"","code":"# create simple cq dataset with two samples, two targets  and 3 reps cq_tibble <- tibble(sample_id = rep(c(\"S_1\",\"S_1\",\"S_1\", \"S_2\", \"S_2\", \"S_2\"), 2),                      target_id = rep(c(\"T_1\",                                        \"T_norm\"), each = 6),                      tech_rep = rep(1:3, 4),                      well_row = rep(c(\"A\",                                       \"B\"), each = 6),                      well_col = rep(1:6, 2),                      well = paste0(well_row, well_col),                      cq = c(10, 10, 10, 12, 12, 11,                              9,  9,  9,  9,  9,  9))                       # calculate deltacq using reference target_id called 'T_norm'  #----- use case 1: median reference target_id value cq_tibble %>%     calculate_deltacq_bysampleid(ref_target_ids = \"T_norm\") #> # A tibble: 12 × 10 #>    sample_id target_id tech_rep well_row well_col well     cq ref_cq delta_cq #>    <chr>     <chr>        <int> <chr>       <int> <chr> <dbl>  <dbl>    <dbl> #>  1 S_1       T_1              1 A               1 A1       10      9        1 #>  2 S_1       T_1              2 A               2 A2       10      9        1 #>  3 S_1       T_1              3 A               3 A3       10      9        1 #>  4 S_1       T_norm           1 B               1 B1        9      9        0 #>  5 S_1       T_norm           2 B               2 B2        9      9        0 #>  6 S_1       T_norm           3 B               3 B3        9      9        0 #>  7 S_2       T_1              1 A               4 A4       12      9        3 #>  8 S_2       T_1              2 A               5 A5       12      9        3 #>  9 S_2       T_1              3 A               6 A6       11      9        2 #> 10 S_2       T_norm           1 B               4 B4        9      9        0 #> 11 S_2       T_norm           2 B               5 B5        9      9        0 #> 12 S_2       T_norm           3 B               6 B6        9      9        0 #> # ℹ 1 more variable: rel_abund <dbl>  #----- use case 2: mean reference target_id value  cq_tibble %>%     calculate_deltacq_bysampleid(ref_target_ids = \"T_norm\",                                  norm_function = mean) #> # A tibble: 12 × 10 #>    sample_id target_id tech_rep well_row well_col well     cq ref_cq delta_cq #>    <chr>     <chr>        <int> <chr>       <int> <chr> <dbl>  <dbl>    <dbl> #>  1 S_1       T_1              1 A               1 A1       10      9        1 #>  2 S_1       T_1              2 A               2 A2       10      9        1 #>  3 S_1       T_1              3 A               3 A3       10      9        1 #>  4 S_1       T_norm           1 B               1 B1        9      9        0 #>  5 S_1       T_norm           2 B               2 B2        9      9        0 #>  6 S_1       T_norm           3 B               3 B3        9      9        0 #>  7 S_2       T_1              1 A               4 A4       12      9        3 #>  8 S_2       T_1              2 A               5 A5       12      9        3 #>  9 S_2       T_1              3 A               6 A6       11      9        2 #> 10 S_2       T_norm           1 B               4 B4        9      9        0 #> 11 S_2       T_norm           2 B               5 B5        9      9        0 #> 12 S_2       T_norm           3 B               6 B6        9      9        0 #> # ℹ 1 more variable: rel_abund <dbl>"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_deltadeltacq_bytargetid.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate delta delta cq (\\(\\Delta \\Delta Cq\\)) to globally normalize\nquantification cycle (log2-fold) data across sample_id. — calculate_deltadeltacq_bytargetid","title":"Calculate delta delta cq (\\(\\Delta \\Delta Cq\\)) to globally normalize\nquantification cycle (log2-fold) data across sample_id. — calculate_deltadeltacq_bytargetid","text":"default, \\(\\Delta \\Delta Cq\\) positive target highly detected relevant sample, compared reference samples. can flipped setting parameter `ddcq_positive` `FALSE`. either case, fold change, \\(2^{\\Delta \\Delta Cq}\\), also reported.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_deltadeltacq_bytargetid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate delta delta cq (\\(\\Delta \\Delta Cq\\)) to globally normalize\nquantification cycle (log2-fold) data across sample_id. — calculate_deltadeltacq_bytargetid","text":"","code":"calculate_deltadeltacq_bytargetid(   deltacq_df,   ref_sample_ids,   norm_function = median,   ddcq_positive = TRUE )"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_deltadeltacq_bytargetid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate delta delta cq (\\(\\Delta \\Delta Cq\\)) to globally normalize\nquantification cycle (log2-fold) data across sample_id. — calculate_deltadeltacq_bytargetid","text":"deltacq_df data frame containing columns `sample_id`, value_name   (default `delta_cq`) tid_name (default `target_id`). Crucially,   sample_id different technical replicates measuring   identical reactions different wells plate, differ   different biological experimental replicates. Usually data frame output   `calculate_deltacq_bysampleid`. ref_sample_ids reference sample_ids normalize norm_function Function use calculate value normalize given scale. Default median, alternatively use mean. ddcq_positive (default TRUE) output \\(\\Delta \\Delta Cq\\) positive target highly detected relevant sample, compared reference samples.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_deltadeltacq_bytargetid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate delta delta cq (\\(\\Delta \\Delta Cq\\)) to globally normalize\nquantification cycle (log2-fold) data across sample_id. — calculate_deltadeltacq_bytargetid","text":"data frame like cq_df three additional columns:","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_deltadeltacq_bytargetid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate delta delta cq (\\(\\Delta \\Delta Cq\\)) to globally normalize\nquantification cycle (log2-fold) data across sample_id. — calculate_deltadeltacq_bytargetid","text":"function global normalization, samples compared one reference samples specified `ref_sample_ids`. experimental designs require comparing samples pairs small groups, e.g. time course comparing `delta_cq` values reference strain time point. situations, instead recommend adapting code function, changing grouping variables used `dplyr::group_by` draw contrasts appropriate experiment.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_deltadeltacq_bytargetid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate delta delta cq (\\(\\Delta \\Delta Cq\\)) to globally normalize\nquantification cycle (log2-fold) data across sample_id. — calculate_deltadeltacq_bytargetid","text":"","code":"# create simple deltacq dataset with two samples, two targets and 3 reps deltacq_tibble <- tibble(sample_id = rep(c(\"S_1\",\"S_1\",\"S_1\", \"S_norm\", \"S_norm\", \"S_norm\"), 2),                      target_id = rep(c(\"T_1\",                                        \"T_2\"), each = 6),                      tech_rep = rep(1:3, 4),                      well_row = rep(c(\"A\",                                       \"B\"), each = 6),                      well_col = rep(1:6, 2),                      well = paste0(well_row,well_col),                      delta_cq = c(1, 1, 1, 3, 3, 2,                                   4, 5, 4, 5, 5, 5))                       # calculate deltadeltacq using reference target_id called 'S_norm'  #----- use case 1: median reference sample_id value deltacq_tibble %>%     calculate_deltadeltacq_bytargetid(ref_sample_ids = \"S_norm\") #> # A tibble: 12 × 10 #>    sample_id target_id tech_rep well_row well_col well  delta_cq ref_delta_cq #>    <chr>     <chr>        <int> <chr>       <int> <chr>    <dbl>        <dbl> #>  1 S_1       T_1              1 A               1 A1           1            3 #>  2 S_1       T_1              2 A               2 A2           1            3 #>  3 S_1       T_1              3 A               3 A3           1            3 #>  4 S_norm    T_1              1 A               4 A4           3            3 #>  5 S_norm    T_1              2 A               5 A5           3            3 #>  6 S_norm    T_1              3 A               6 A6           2            3 #>  7 S_1       T_2              1 B               1 B1           4            5 #>  8 S_1       T_2              2 B               2 B2           5            5 #>  9 S_1       T_2              3 B               3 B3           4            5 #> 10 S_norm    T_2              1 B               4 B4           5            5 #> 11 S_norm    T_2              2 B               5 B5           5            5 #> 12 S_norm    T_2              3 B               6 B6           5            5 #> # ℹ 2 more variables: deltadelta_cq <dbl>, fold_change <dbl>  #----- use case 2: mean reference sample_id value  deltacq_tibble %>%     calculate_deltadeltacq_bytargetid(ref_sample_ids = \"S_norm\",                                  norm_function = mean) #> # A tibble: 12 × 10 #>    sample_id target_id tech_rep well_row well_col well  delta_cq ref_delta_cq #>    <chr>     <chr>        <int> <chr>       <int> <chr>    <dbl>        <dbl> #>  1 S_1       T_1              1 A               1 A1           1         2.67 #>  2 S_1       T_1              2 A               2 A2           1         2.67 #>  3 S_1       T_1              3 A               3 A3           1         2.67 #>  4 S_norm    T_1              1 A               4 A4           3         2.67 #>  5 S_norm    T_1              2 A               5 A5           3         2.67 #>  6 S_norm    T_1              3 A               6 A6           2         2.67 #>  7 S_1       T_2              1 B               1 B1           4         5    #>  8 S_1       T_2              2 B               2 B2           5         5    #>  9 S_1       T_2              3 B               3 B3           4         5    #> 10 S_norm    T_2              1 B               4 B4           5         5    #> 11 S_norm    T_2              2 B               5 B5           5         5    #> 12 S_norm    T_2              3 B               6 B6           5         5    #> # ℹ 2 more variables: deltadelta_cq <dbl>, fold_change <dbl>"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_drdt_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dR/dT of melt curves for of every well in a plate. — calculate_drdt_plate","title":"Calculate dR/dT of melt curves for of every well in a plate. — calculate_drdt_plate","text":"dR/dT, derivative melt curve (fluorescence signal R vs temperature T), maximum melting temperature Tm. single peak suggests single-length PCR product present well.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_drdt_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dR/dT of melt curves for of every well in a plate. — calculate_drdt_plate","text":"","code":"calculate_drdt_plate(platemelt, method = \"spline\", ...)"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_drdt_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dR/dT of melt curves for of every well in a plate. — calculate_drdt_plate","text":"platemelt data frame describing melt curves, including variables well, temperature, fluor_raw (raw fluorescence value). method use smoothing: \"spline\" default, uses smoothing spline stats::smooth.spline. \"diff\" base::diff lagged difference ... arguments pass smoothing method.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_drdt_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dR/dT of melt curves for of every well in a plate. — calculate_drdt_plate","text":"platemelt additional column dRdT.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_drdt_plate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate dR/dT of melt curves for of every well in a plate. — calculate_drdt_plate","text":"Note function group plate, well. function give strange results pass data  one plate. Avoid analysing one plate time.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_drdt_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate dR/dT of melt curves for of every well in a plate. — calculate_drdt_plate","text":"","code":"# create simple curve # create simple dataset of raw fluorescence with two samples temp_tibble <- tibble(sample_id = rep(c(\"S1\", \"S2\"), each = 10),                           target_id = \"T1\",                           well_row = \"A\",                           well_col = rep(c(1, 2), each = 10),                           well = rep(c(\"A1\", \"A2\"), each = 10),                           temperature = rep(56:65,2),                           fluor_raw = c(1:10, 6:15))  # calculate drdt of all melt curves #----- use case 1 : using splines temp_tibble %>%     calculate_drdt_plate() #> # A tibble: 20 × 8 #>    sample_id target_id well_row well_col well  temperature fluor_raw  dRdT #>    <chr>     <chr>     <chr>       <dbl> <chr>       <int>     <int> <dbl> #>  1 S1        T1        A               1 A1             56         1 -1.00 #>  2 S1        T1        A               1 A1             57         2 -1    #>  3 S1        T1        A               1 A1             58         3 -1.00 #>  4 S1        T1        A               1 A1             59         4 -1.00 #>  5 S1        T1        A               1 A1             60         5 -1.00 #>  6 S1        T1        A               1 A1             61         6 -1.00 #>  7 S1        T1        A               1 A1             62         7 -1    #>  8 S1        T1        A               1 A1             63         8 -1.00 #>  9 S1        T1        A               1 A1             64         9 -1.00 #> 10 S1        T1        A               1 A1             65        10 -1.00 #> 11 S2        T1        A               2 A2             56         6 -1.00 #> 12 S2        T1        A               2 A2             57         7 -1    #> 13 S2        T1        A               2 A2             58         8 -1.00 #> 14 S2        T1        A               2 A2             59         9 -1.00 #> 15 S2        T1        A               2 A2             60        10 -1    #> 16 S2        T1        A               2 A2             61        11 -1.00 #> 17 S2        T1        A               2 A2             62        12 -1.00 #> 18 S2        T1        A               2 A2             63        13 -1.00 #> 19 S2        T1        A               2 A2             64        14 -1.00 #> 20 S2        T1        A               2 A2             65        15 -1.00  # optional arguments are passed to smooth.splines function temp_tibble %>%     calculate_drdt_plate(spar = 0.5) #> # A tibble: 20 × 8 #>    sample_id target_id well_row well_col well  temperature fluor_raw  dRdT #>    <chr>     <chr>     <chr>       <dbl> <chr>       <int>     <int> <dbl> #>  1 S1        T1        A               1 A1             56         1 -1.00 #>  2 S1        T1        A               1 A1             57         2 -1.00 #>  3 S1        T1        A               1 A1             58         3 -1.00 #>  4 S1        T1        A               1 A1             59         4 -1.00 #>  5 S1        T1        A               1 A1             60         5 -1.00 #>  6 S1        T1        A               1 A1             61         6 -1.00 #>  7 S1        T1        A               1 A1             62         7 -1    #>  8 S1        T1        A               1 A1             63         8 -1.00 #>  9 S1        T1        A               1 A1             64         9 -1.00 #> 10 S1        T1        A               1 A1             65        10 -1.00 #> 11 S2        T1        A               2 A2             56         6 -1.00 #> 12 S2        T1        A               2 A2             57         7 -1.00 #> 13 S2        T1        A               2 A2             58         8 -1.00 #> 14 S2        T1        A               2 A2             59         9 -1.00 #> 15 S2        T1        A               2 A2             60        10 -1.00 #> 16 S2        T1        A               2 A2             61        11 -1.00 #> 17 S2        T1        A               2 A2             62        12 -1    #> 18 S2        T1        A               2 A2             63        13 -1.00 #> 19 S2        T1        A               2 A2             64        14 -1.00 #> 20 S2        T1        A               2 A2             65        15 -1.00  #----- use case 2 : using difference between adjacent points temp_tibble %>%     calculate_drdt_plate(method = \"diff\") #> # A tibble: 20 × 8 #>    sample_id target_id well_row well_col well  temperature fluor_raw  dRdT #>    <chr>     <chr>     <chr>       <dbl> <chr>       <int>     <int> <dbl> #>  1 S1        T1        A               1 A1             56         1    -1 #>  2 S1        T1        A               1 A1             57         2    -1 #>  3 S1        T1        A               1 A1             58         3    -1 #>  4 S1        T1        A               1 A1             59         4    -1 #>  5 S1        T1        A               1 A1             60         5    -1 #>  6 S1        T1        A               1 A1             61         6    -1 #>  7 S1        T1        A               1 A1             62         7    -1 #>  8 S1        T1        A               1 A1             63         8    -1 #>  9 S1        T1        A               1 A1             64         9    -1 #> 10 S1        T1        A               1 A1             65        10    NA #> 11 S2        T1        A               2 A2             56         6    -1 #> 12 S2        T1        A               2 A2             57         7    -1 #> 13 S2        T1        A               2 A2             58         8    -1 #> 14 S2        T1        A               2 A2             59         9    -1 #> 15 S2        T1        A               2 A2             60        10    -1 #> 16 S2        T1        A               2 A2             61        11    -1 #> 17 S2        T1        A               2 A2             62        12    -1 #> 18 S2        T1        A               2 A2             63        13    -1 #> 19 S2        T1        A               2 A2             64        14    -1 #> 20 S2        T1        A               2 A2             65        15    NA"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_dydx.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate dy/dx vector from vectors y and x — calculate_dydx","title":"Calculate dy/dx vector from vectors y and x — calculate_dydx","text":"Used tidyqpcr calculate dR/dT melt curve fluorescence signal R vs temperature T.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_dydx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate dy/dx vector from vectors y and x — calculate_dydx","text":"","code":"calculate_dydx(x, y, method = \"spline\", ...)"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_dydx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate dy/dx vector from vectors y and x — calculate_dydx","text":"x input variable, numeric vector, assumed temperature y output variable, numeric vector length x, assumed fluorescence signal. method use smoothing: \"spline\" default, uses smoothing spline stats::smooth.spline. \"diff\" base::diff lagged difference ... arguments pass smoothing method.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_dydx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate dy/dx vector from vectors y and x — calculate_dydx","text":"estimated first derivative y respect x, numeric vector   length y.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_dydx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate dy/dx vector from vectors y and x — calculate_dydx","text":"","code":"# create simple curve x = 1:5 y = x^2  # calculate gradient of curve #----- use case 1 : using splines calculate_dydx(x, y) #> [1] -2.572999 -3.856780 -5.999883 -8.143689 -9.425360  # optional arguments are passed to smooth.splines function calculate_dydx(x, y, spar = 0.5) #> [1] -4.847839 -5.178761 -6.000000 -6.821239 -7.152161  #----- use case 2 : using difference between adjacent points calculate_dydx(x, y, method = \"diff\") #> [1] -3 -5 -7 -9 NA"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_efficiency.html","id":null,"dir":"Reference","previous_headings":"","what":"Calibrate primer sets / probes by calculating detection efficiency and\nR squared — calculate_efficiency","title":"Calibrate primer sets / probes by calculating detection efficiency and\nR squared — calculate_efficiency","text":"Note efficiency given ratio, per cent; multiply 100 .","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_efficiency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calibrate primer sets / probes by calculating detection efficiency and\nR squared — calculate_efficiency","text":"","code":"calculate_efficiency(cq_df_1, formula = cq ~ log2(dilution) + biol_rep)"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_efficiency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calibrate primer sets / probes by calculating detection efficiency and\nR squared — calculate_efficiency","text":"cq_df_1 data frame cq (quantification cycle) data, 1 row per well. Must columns cq, dilution. Assumes data 1 probe/primer set/target_id, .e. values cq_df_1 fit slope. formula formula use log-log regression fit. Default value assumes multiple biological replicates, cq ~ log2(dilution) + biol_rep. single Biological Replicate, change cq ~ log2(dilution).","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_efficiency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calibrate primer sets / probes by calculating detection efficiency and\nR squared — calculate_efficiency","text":"data frame 1 single row, columns: efficiency, efficiency.sd, r.squared.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_efficiency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calibrate primer sets / probes by calculating detection efficiency and\nR squared — calculate_efficiency","text":"","code":"# create simple dilution dataset dilution_tibble <- tibble(dilution = rep(c(1, 0.1, 0.001, 0.0001), 2),                      cq = c(1, 3, 4, 6,                             4, 5, 6, 7),                      biol_rep = rep(c(1,2), each = 4),                      target_id = \"T1\")                       # calculate primer efficiency  #----- use case 1: include difference across replicates in model dilution_tibble %>%     calculate_efficiency() #> # A tibble: 1 × 3 #>   efficiency efficiency.sd r.squared #>        <dbl>         <dbl>     <dbl> #> 1      0.271        0.0404     0.931  #----- use case 2: ignore difference across replicates dilution_tibble %>%     calculate_efficiency(formula = cq ~ log2(dilution)) #> # A tibble: 1 × 3 #>   efficiency efficiency.sd r.squared #>        <dbl>         <dbl>     <dbl> #> 1      0.271        0.0860     0.623"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_efficiency_bytargetid.html","id":null,"dir":"Reference","previous_headings":"","what":"Calibrate multiple probes by calculating detection efficiency and R squared — calculate_efficiency_bytargetid","title":"Calibrate multiple probes by calculating detection efficiency and R squared — calculate_efficiency_bytargetid","text":"See calibration vignette example usage.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_efficiency_bytargetid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calibrate multiple probes by calculating detection efficiency and R squared — calculate_efficiency_bytargetid","text":"","code":"calculate_efficiency_bytargetid(   cq_df,   formula = cq ~ log2(dilution) + biol_rep,   use_prep_types = \"+RT\" )"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_efficiency_bytargetid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calibrate multiple probes by calculating detection efficiency and R squared — calculate_efficiency_bytargetid","text":"cq_df data frame cq (quantification cycle) data, 1 row per well Must columns prep_type, target_id, cq, dilution. prep_type==\"+RT\" columns used. formula formula use log-log regression fit. Default value assumes multiple biological replicates, cq ~ log2(dilution) + biol_rep. single Biological Replicate, change cq ~ log2(dilution). multiple sample_ids, change cq ~ log2(dilution) + sample_id. See ?formula background help. use_prep_types prep_type column values use, default \"+RT\" RT-qPCR. default, includes reverse-transcribed values efficiency estimation, excludes negative controls -template -RT. skip filtering step, set use_prep_types=NA.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_efficiency_bytargetid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calibrate multiple probes by calculating detection efficiency and R squared — calculate_efficiency_bytargetid","text":"data frame columns: target_id, efficiency, efficiency.sd, r.squared.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_efficiency_bytargetid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calibrate multiple probes by calculating detection efficiency and R squared — calculate_efficiency_bytargetid","text":"Note efficiency given ratio, per cent; multiply 100 .","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_efficiency_bytargetid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calibrate multiple probes by calculating detection efficiency and R squared — calculate_efficiency_bytargetid","text":"","code":"# create simple dilution dataset for two target_ids with two biological reps dilution_tibble <- tibble(target_id = rep(c(\"T_1\",                                             \"T_2\"), each = 8),                           well_row = rep(c(\"A\",                                            \"B\"), each = 8),                           well_col = rep(1:8, 2),                           well = paste0(well_row, well_col),                           dilution = rep(c(1, 0.1, 0.001, 0.0001), 4),                           cq = c(1, 3, 4, 6, 1, 3, 5, 7,                                  4, 5, 6, 7, 3, 7, 8, 9),                           biol_rep = rep(c(1, 1, 1, 1, 2, 2, 2, 2), 2),                           prep_type = \"+RT\")                       # calculate primer efficiency for multiple targets  #----- use case 1: include difference across replicates in model dilution_tibble %>%     calculate_efficiency_bytargetid() #> # A tibble: 2 × 4 #>   target_id efficiency efficiency.sd r.squared #>   <chr>          <dbl>         <dbl>     <dbl> #> 1 T_1            0.376        0.0398     0.948 #> 2 T_2            0.301        0.0722     0.801  #----- use case 2: ignore difference across replicates dilution_tibble %>%     calculate_efficiency_bytargetid(formula = cq ~ log2(dilution)) #> # A tibble: 2 × 4 #>   target_id efficiency efficiency.sd r.squared #>   <chr>          <dbl>         <dbl>     <dbl> #> 1 T_1            0.376        0.0412     0.933 #> 2 T_2            0.301        0.0819     0.693"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_normvalue.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a normalized value for a subset of reference ids — calculate_normvalue","title":"Calculate a normalized value for a subset of reference ids — calculate_normvalue","text":"used calculate normalized `cq` values reference `target_ids` (e.g. genes), use `delta_cq` calculation `sample_id`.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_normvalue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a normalized value for a subset of reference ids — calculate_normvalue","text":"","code":"calculate_normvalue(   value_df,   ref_ids,   value_name = \"value\",   id_name = \"id\",   norm_function = median )"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_normvalue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a normalized value for a subset of reference ids — calculate_normvalue","text":"value_df data frame containing relevant columns, named `value_name` `id_name` parameters. ref_ids values reference ids, used calculate normalized reference value. value_name name column containing values. column numeric. id_name name column containing ids. norm_function Function use calculate value normalize . Default function median, alternatively use mean, geometric mean, etc.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_normvalue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a normalized value for a subset of reference ids — calculate_normvalue","text":"Also used calculate normalized `delta_cq` values reference `sample_ids`, use `deltadelta_cq` calculation `target_id`.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/calculate_normvalue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a normalized value for a subset of reference ids — calculate_normvalue","text":"","code":"# create simple cq dataset with one sample, two targets  and 3 reps cq_tibble <- tibble(sample_id = \"S_1\",                      target_id = rep(c(\"T_1\",                                        \"T_norm\"), each = 3),                      tech_rep = rep(1:3, 2),                      well_row = rep(c(\"A\",                                       \"B\"), each = 3),                      well_col = 1,                      well = paste0(well_row, well_col),                      cq = c(10, 10, 10,                             12, 12, 11))                       # normalise cq to reference target_id called 'T_norm'  #----- use case 1: median reference target_id value cq_tibble %>%     calculate_normvalue(ref_ids = \"T_norm\",                         value_name = \"cq\",                         id_name = \"target_id\") #> # A tibble: 6 × 8 #>   sample_id target_id tech_rep well_row well_col well     cq value_to_norm_by #>   <chr>     <chr>        <int> <chr>       <dbl> <chr> <dbl>            <dbl> #> 1 S_1       T_1              1 A               1 A1       10               12 #> 2 S_1       T_1              2 A               1 A1       10               12 #> 3 S_1       T_1              3 A               1 A1       10               12 #> 4 S_1       T_norm           1 B               1 B1       12               12 #> 5 S_1       T_norm           2 B               1 B1       12               12 #> 6 S_1       T_norm           3 B               1 B1       11               12  #----- use case 2: mean reference target_id value  cq_tibble %>%     calculate_normvalue(ref_ids = \"T_norm\",                         value_name = \"cq\",                         id_name = \"target_id\",                         norm_function = mean) #> # A tibble: 6 × 8 #>   sample_id target_id tech_rep well_row well_col well     cq value_to_norm_by #>   <chr>     <chr>        <int> <chr>       <dbl> <chr> <dbl>            <dbl> #> 1 S_1       T_1              1 A               1 A1       10             11.7 #> 2 S_1       T_1              2 A               1 A1       10             11.7 #> 3 S_1       T_1              3 A               1 A1       10             11.7 #> 4 S_1       T_norm           1 B               1 B1       12             11.7 #> 5 S_1       T_norm           2 B               1 B1       12             11.7 #> 6 S_1       T_norm           3 B               1 B1       11             11.7"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_blank_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a blank plate template as a tibble (with helper functions for common plate sizes) — create_blank_plate","title":"Create a blank plate template as a tibble (with helper functions for common plate sizes) — create_blank_plate","text":"help, examples explanations, see plate setup vignette: vignette(\"platesetup_vignette\", package = \"tidyqpcr\")","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_blank_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a blank plate template as a tibble (with helper functions for common plate sizes) — create_blank_plate","text":"","code":"create_blank_plate(well_row = LETTERS[1:16], well_col = 1:24)  create_blank_plate_96well()  create_blank_plate_1536well(   well_row = make_row_names_lc1536(),   well_col = 1:48 )"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_blank_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a blank plate template as a tibble (with helper functions for common plate sizes) — create_blank_plate","text":"well_row Vector Row labels, usually LETTERS well_col Vector Column labels, usually numbers","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_blank_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a blank plate template as a tibble (with helper functions for common plate sizes) — create_blank_plate","text":"tibble (data frame) columns well_row, well_col, well.   contains pairwise combinations well_row well_col, well   individual well names. well_row well_col coerced factors   (even well_col supplied numbers), ensure order consistent. However, well character vector default behaviour   \"unite\", display order matter. Default value describes full 384-well plate.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_blank_plate.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Create a blank plate template as a tibble (with helper functions for common plate sizes) — create_blank_plate","text":"create_blank_plate_96well: create blank 96-well plate create_blank_plate_1536well: create blank 1536-well plate","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_blank_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a blank plate template as a tibble (with helper functions for common plate sizes) — create_blank_plate","text":"","code":"create_blank_plate(well_row=LETTERS[1:2],well_col=1:3) #> # A tibble: 6 × 3 #>   well  well_row well_col #>   <chr> <fct>    <fct>    #> 1 A1    A        1        #> 2 A2    A        2        #> 3 A3    A        3        #> 4 B1    B        1        #> 5 B2    B        2        #> 6 B3    B        3         create_blank_plate_96well() #> # A tibble: 96 × 3 #>    well  well_row well_col #>    <chr> <fct>    <fct>    #>  1 A1    A        1        #>  2 A2    A        2        #>  3 A3    A        3        #>  4 A4    A        4        #>  5 A5    A        5        #>  6 A6    A        6        #>  7 A7    A        7        #>  8 A8    A        8        #>  9 A9    A        9        #> 10 A10   A        10       #> # ℹ 86 more rows  create_blank_plate_1536well() #> # A tibble: 1,536 × 3 #>    well  well_row well_col #>    <chr> <fct>    <fct>    #>  1 Aa1   Aa       1        #>  2 Aa2   Aa       2        #>  3 Aa3   Aa       3        #>  4 Aa4   Aa       4        #>  5 Aa5   Aa       5        #>  6 Aa6   Aa       6        #>  7 Aa7   Aa       7        #>  8 Aa8   Aa       8        #>  9 Aa9   Aa       9        #> 10 Aa10  Aa       10       #> # ℹ 1,526 more rows  # create blank 96-well plate with empty edge wells  create_blank_plate(well_row=LETTERS[2:7], well_col=2:11) #> # A tibble: 60 × 3 #>    well  well_row well_col #>    <chr> <fct>    <fct>    #>  1 B2    B        2        #>  2 B3    B        3        #>  3 B4    B        4        #>  4 B5    B        5        #>  5 B6    B        6        #>  6 B7    B        7        #>  7 B8    B        8        #>  8 B9    B        9        #>  9 B10   B        10       #> 10 B11   B        11       #> # ℹ 50 more rows  # create blank 1536-well plate with empty edge wells  full_plate_row_names <- make_row_names_lc1536()  create_blank_plate(well_row=full_plate_row_names[2:31], well_col=2:47) #> # A tibble: 1,380 × 3 #>    well  well_row well_col #>    <chr> <fct>    <fct>    #>  1 Ab2   Ab       2        #>  2 Ab3   Ab       3        #>  3 Ab4   Ab       4        #>  4 Ab5   Ab       5        #>  5 Ab6   Ab       6        #>  6 Ab7   Ab       7        #>  7 Ab8   Ab       8        #>  8 Ab9   Ab       9        #>  9 Ab10  Ab       10       #> 10 Ab11  Ab       11       #> # ℹ 1,370 more rows"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_colkey_4diln_2ctrl_in_24.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 4-dilution column key for primer calibration — create_colkey_4diln_2ctrl_in_24","title":"Create a 4-dilution column key for primer calibration — create_colkey_4diln_2ctrl_in_24","text":"Creates 24-column key primer calibration, 2x biol_reps 2x tech_reps, 5-fold dilution 5^4 +RT; -RT (reverse transcriptase), NT (template) negative controls. total 6 versions sample replicate.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_colkey_4diln_2ctrl_in_24.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 4-dilution column key for primer calibration — create_colkey_4diln_2ctrl_in_24","text":"","code":"create_colkey_4diln_2ctrl_in_24(   dilution = c(5^(0:-3), 1, 1),   dilution_nice = c(\"1x\", \"5x\", \"25x\", \"125x\", \"-RT\", \"NT\"),   prep_type = c(rep(\"+RT\", 4), \"-RT\", \"NT\"),   biol_rep = rep(c(\"A\", \"B\"), each = 12, length.out = 24),   tech_rep = rep(1:2, each = 6, length.out = 24) )"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_colkey_4diln_2ctrl_in_24.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a 4-dilution column key for primer calibration — create_colkey_4diln_2ctrl_in_24","text":"dilution Numeric vector length 6 describing sample dilutions dilution_nice Character vector length 6 nice labels sample dilutions prep_type Character vector length 6 describing type sample (+RT, -RT, NT) biol_rep Character vector length 6 describing biological replicates tech_rep Character vector length 6 describing technical replicates","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_colkey_4diln_2ctrl_in_24.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 4-dilution column key for primer calibration — create_colkey_4diln_2ctrl_in_24","text":"tibble (data frame) 24 rows, columns well_col, dilution,   dilution_nice, prep_type, biol_rep, tech_rep.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_colkey_4diln_2ctrl_in_24.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 4-dilution column key for primer calibration — create_colkey_4diln_2ctrl_in_24","text":"","code":"create_colkey_4diln_2ctrl_in_24() #> # A tibble: 24 × 6 #>    well_col dilution dilution_nice prep_type biol_rep tech_rep #>    <fct>       <dbl> <chr>         <fct>     <fct>    <fct>    #>  1 1           1     1x            +RT       A        1        #>  2 2           0.2   5x            +RT       A        1        #>  3 3           0.04  25x           +RT       A        1        #>  4 4           0.008 125x          +RT       A        1        #>  5 5           1     -RT           -RT       A        1        #>  6 6           1     NT            NT        A        1        #>  7 7           1     1x            +RT       A        2        #>  8 8           0.2   5x            +RT       A        2        #>  9 9           0.04  25x           +RT       A        2        #> 10 10          0.008 125x          +RT       A        2        #> # ℹ 14 more rows"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_colkey_6_in_24.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 6-value, 24-column key for plates — create_colkey_6_in_24","title":"Create a 6-value, 24-column key for plates — create_colkey_6_in_24","text":"Create 24-column key 6 values repeated 24 plate columns. 6 values repeated 3x +RT Techreps 1x -RT.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_colkey_6_in_24.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 6-value, 24-column key for plates — create_colkey_6_in_24","text":"","code":"create_colkey_6_in_24(...)"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_colkey_6_in_24.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a 6-value, 24-column key for plates — create_colkey_6_in_24","text":"... Vectors length 6 describing well contents, e.g. sample_id target_id","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_colkey_6_in_24.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 6-value, 24-column key for plates — create_colkey_6_in_24","text":"tibble (data frame) 24 rows, columns well_col, prep_type, tech_rep, supplied values.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_colkey_6_in_24.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a 6-value, 24-column key for plates — create_colkey_6_in_24","text":"helps create plate layouts standard designs.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_colkey_6_in_24.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 6-value, 24-column key for plates — create_colkey_6_in_24","text":"","code":"create_colkey_6_in_24(sample_id=LETTERS[1:6]) #> # A tibble: 24 × 4 #>    well_col prep_type tech_rep sample_id #>    <fct>    <fct>     <fct>    <chr>     #>  1 1        +RT       1        A         #>  2 2        +RT       1        B         #>  3 3        +RT       1        C         #>  4 4        +RT       1        D         #>  5 5        +RT       1        E         #>  6 6        +RT       1        F         #>  7 7        +RT       2        A         #>  8 8        +RT       2        B         #>  9 9        +RT       2        C         #> 10 10       +RT       2        D         #> # ℹ 14 more rows"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_colkey_6diln_2ctrl_in_24.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 6-dilution column key for primer calibration — create_colkey_6diln_2ctrl_in_24","title":"Create a 6-dilution column key for primer calibration — create_colkey_6diln_2ctrl_in_24","text":"Creates 24-column key primer calibration, 1x biol_reps 3x tech_reps, 5-fold dilution 5^6 +RT; -RT (reverse transcriptase), NT (template) negative controls. total 8 versions replicate.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_colkey_6diln_2ctrl_in_24.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 6-dilution column key for primer calibration — create_colkey_6diln_2ctrl_in_24","text":"","code":"create_colkey_6diln_2ctrl_in_24(   dilution = c(5^(0:-5), 1, 1),   dilution_nice = c(\"1x\", \"5x\", \"25x\", \"125x\", \"625x\", \"3125x\", \"-RT\", \"NT\"),   prep_type = c(rep(\"+RT\", 6), \"-RT\", \"NT\"),   tech_rep = rep(1:3, each = 8, length.out = 24) )"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_colkey_6diln_2ctrl_in_24.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a 6-dilution column key for primer calibration — create_colkey_6diln_2ctrl_in_24","text":"dilution Numeric vector length 8 describing sample dilutions dilution_nice Character vector length 8 nice labels sample dilutions prep_type Character vector length 8 describing type sample (+RT, -RT, NT) tech_rep Character vector length 8 describing technical replicates","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_colkey_6diln_2ctrl_in_24.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 6-dilution column key for primer calibration — create_colkey_6diln_2ctrl_in_24","text":"tibble (data frame) 24 rows, variables well_col, dilution,   dilution_nice, prep_type, biol_rep, tech_rep.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_colkey_6diln_2ctrl_in_24.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 6-dilution column key for primer calibration — create_colkey_6diln_2ctrl_in_24","text":"","code":"create_colkey_6diln_2ctrl_in_24() #> # A tibble: 24 × 5 #>    well_col dilution dilution_nice prep_type tech_rep #>    <fct>       <dbl> <chr>         <fct>     <fct>    #>  1 1         1       1x            +RT       1        #>  2 2         0.2     5x            +RT       1        #>  3 3         0.04    25x           +RT       1        #>  4 4         0.008   125x          +RT       1        #>  5 5         0.0016  625x          +RT       1        #>  6 6         0.00032 3125x         +RT       1        #>  7 7         1       -RT           -RT       1        #>  8 8         1       NT            NT        1        #>  9 9         1       1x            +RT       2        #> 10 10        0.2     5x            +RT       2        #> # ℹ 14 more rows"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_rowkey_4_in_16.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 4-value, 16-row key for plates — create_rowkey_4_in_16","title":"Create a 4-value, 16-row key for plates — create_rowkey_4_in_16","text":"Create 16-row key 4 values repeated 16 plate rows. 4 values repeated 3x +RT Techreps 1x -RT.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_rowkey_4_in_16.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 4-value, 16-row key for plates — create_rowkey_4_in_16","text":"","code":"create_rowkey_4_in_16(...)"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_rowkey_4_in_16.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a 4-value, 16-row key for plates — create_rowkey_4_in_16","text":"... Vectors length 4 describing well contents, e.g. sample_id target_id","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_rowkey_4_in_16.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 4-value, 16-row key for plates — create_rowkey_4_in_16","text":"tibble (data frame) 16 rows, variables well_row, prep_type,   tech_rep, supplied values.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_rowkey_4_in_16.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a 4-value, 16-row key for plates — create_rowkey_4_in_16","text":"helps create plate layouts standard designs.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_rowkey_4_in_16.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 4-value, 16-row key for plates — create_rowkey_4_in_16","text":"","code":"create_rowkey_4_in_16(sample_id=c(\"sheep\",\"goat\",\"cow\",\"chicken\")) #> # A tibble: 16 × 4 #>    well_row prep_type tech_rep sample_id #>    <fct>    <fct>     <fct>    <chr>     #>  1 A        +RT       1        sheep     #>  2 B        +RT       1        goat      #>  3 C        +RT       1        cow       #>  4 D        +RT       1        chicken   #>  5 E        +RT       2        sheep     #>  6 F        +RT       2        goat      #>  7 G        +RT       2        cow       #>  8 H        +RT       2        chicken   #>  9 I        +RT       3        sheep     #> 10 J        +RT       3        goat      #> 11 K        +RT       3        cow       #> 12 L        +RT       3        chicken   #> 13 M        -RT       1        sheep     #> 14 N        -RT       1        goat      #> 15 O        -RT       1        cow       #> 16 P        -RT       1        chicken"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_rowkey_8_in_16_plain.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a plain 8-value, 16-row key for plates — create_rowkey_8_in_16_plain","title":"Create a plain 8-value, 16-row key for plates — create_rowkey_8_in_16_plain","text":"Create 16-row key 8 values repeated 16 plate rows. information included default, hence \"plain\".","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_rowkey_8_in_16_plain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a plain 8-value, 16-row key for plates — create_rowkey_8_in_16_plain","text":"","code":"create_rowkey_8_in_16_plain(...)"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_rowkey_8_in_16_plain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a plain 8-value, 16-row key for plates — create_rowkey_8_in_16_plain","text":"... Vectors length 8 describing well contents, e.g. sample probe.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_rowkey_8_in_16_plain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a plain 8-value, 16-row key for plates — create_rowkey_8_in_16_plain","text":"tibble (data frame) 16 rows, variables well_col,   supplied values.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_rowkey_8_in_16_plain.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a plain 8-value, 16-row key for plates — create_rowkey_8_in_16_plain","text":"helps create plate layouts standard designs.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/create_rowkey_8_in_16_plain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a plain 8-value, 16-row key for plates — create_rowkey_8_in_16_plain","text":"","code":"create_rowkey_8_in_16_plain(sample_id=c(\"me\",\"you\",\"them\",\"him\",                                    \"her\",\"dog\",\"cat\",\"monkey\")) #> # A tibble: 16 × 2 #>    well_row sample_id #>    <fct>    <chr>     #>  1 A        me        #>  2 B        you       #>  3 C        them      #>  4 D        him       #>  5 E        her       #>  6 F        dog       #>  7 G        cat       #>  8 H        monkey    #>  9 I        me        #> 10 J        you       #> 11 K        them      #> 12 L        him       #> 13 M        her       #> 14 N        dog       #> 15 O        cat       #> 16 P        monkey"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/debaseline.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove baseline from amplification curves (BETA) — debaseline","title":"Remove baseline from amplification curves (BETA) — debaseline","text":"Remove baseline qPCR amplification curves subtracting median initial cycles.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/debaseline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove baseline from amplification curves (BETA) — debaseline","text":"","code":"debaseline(plateamp, maxcycle = 10)"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/debaseline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove baseline from amplification curves (BETA) — debaseline","text":"plateamp data frame plate amplification data, including variables well, cycle, fluor_raw (raw fluorescence value), program_no. Assume program 2 amplification curves Roche Lightcycler format data. maxcycle maximum cycle value use baseline, amplification.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/debaseline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove baseline from amplification curves (BETA) — debaseline","text":"platemap additional columns per well:","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/debaseline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove baseline from amplification curves (BETA) — debaseline","text":"BETA function version : - assumes Roche Lightcycler format, ideally replace \"program_no == 2\" something generic? - rule-thumb \"baseline median initial 10 cycles\" tested robustly","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/debaseline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove baseline from amplification curves (BETA) — debaseline","text":"","code":"# create simple dataset of raw fluorescence # with two samples over 15 cycles raw_fluor_tibble <- tibble(sample_id = rep(c(\"S1\", \"S2\"), each = 15),                           target_id = \"T1\",                           well_row = \"A\",                           well_col = rep(c(1, 2), each = 15),                           well = rep(c(\"A1\", \"A2\"), each = 15),                           cycle = rep(1:15,2),                           fluor_raw = c(1:15, 6:20),                           program_no = 2)  # remove base fluorescence from dataset raw_fluor_tibble %>%     debaseline() #> # A tibble: 30 × 10 #>    sample_id target_id well_row well_col well  cycle fluor_raw program_no #>    <chr>     <chr>     <chr>       <dbl> <chr> <int>     <int>      <dbl> #>  1 S1        T1        A               1 A1        1         1          2 #>  2 S1        T1        A               1 A1        2         2          2 #>  3 S1        T1        A               1 A1        3         3          2 #>  4 S1        T1        A               1 A1        4         4          2 #>  5 S1        T1        A               1 A1        5         5          2 #>  6 S1        T1        A               1 A1        6         6          2 #>  7 S1        T1        A               1 A1        7         7          2 #>  8 S1        T1        A               1 A1        8         8          2 #>  9 S1        T1        A               1 A1        9         9          2 #> 10 S1        T1        A               1 A1       10        10          2 #> # ℹ 20 more rows #> # ℹ 2 more variables: fluor_base <dbl>, fluor_signal <dbl>"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/display_plate.html","id":null,"dir":"Reference","previous_headings":"","what":"Display an empty plate plan which can be populated with \nggplot2 geom elements. — display_plate","title":"Display an empty plate plan which can be populated with \nggplot2 geom elements. — display_plate","text":"Display empty plate plan can populated  ggplot2 geom elements.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/display_plate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display an empty plate plan which can be populated with \nggplot2 geom elements. — display_plate","text":"","code":"display_plate(plate)"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/display_plate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display an empty plate plan which can be populated with \nggplot2 geom elements. — display_plate","text":"plate tibble variables well_col, well_row.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/display_plate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display an empty plate plan which can be populated with \nggplot2 geom elements. — display_plate","text":"ggplot object; major output plot ","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/display_plate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display an empty plate plan which can be populated with \nggplot2 geom elements. — display_plate","text":"","code":"library(ggplot2)  # display empty plot of empty plate display_plate(create_blank_plate_96well())   # display wells of empty plate filled by column display_plate(create_blank_plate_96well()) +    geom_tile(aes(fill = well_col), colour = \"black\")   # display wells of empty 1536-well plate filled by row display_plate(create_blank_plate_1536well()) +    geom_tile(aes(fill = well_row), colour = \"black\")"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/display_plate_qpcr.html","id":null,"dir":"Reference","previous_headings":"","what":"Display qPCR plate plan with sample_id, target_id, prep_type per well — display_plate_qpcr","title":"Display qPCR plate plan with sample_id, target_id, prep_type per well — display_plate_qpcr","text":"Display qPCR plate plan sample_id, target_id, prep_type per well","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/display_plate_qpcr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display qPCR plate plan with sample_id, target_id, prep_type per well — display_plate_qpcr","text":"","code":"display_plate_qpcr(plate)"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/display_plate_qpcr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display qPCR plate plan with sample_id, target_id, prep_type per well — display_plate_qpcr","text":"plate tibble variables well_col, well_row, sample_id, target_id, prep_type. Output label_plate_rowcol.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/display_plate_qpcr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display qPCR plate plan with sample_id, target_id, prep_type per well — display_plate_qpcr","text":"ggplot object; major output plot ","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/display_plate_qpcr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display qPCR plate plan with sample_id, target_id, prep_type per well — display_plate_qpcr","text":"","code":"# create basic 6-well plate basic_plate <-      label_plate_rowcol(plate = create_blank_plate(well_row = LETTERS[1:2],                                                   well_col = 1:3),                        rowkey = tibble(well_row = factor(LETTERS[1:2]),                                        target_id = c(\"T_A\",\"T_B\")),                        colkey = tibble(well_col = factor(1:3),                                        sample_id = c(\"S_1\",\"S_2\", \"S_3\"),                                        prep_type = \"+RT\"))  # display basic plate display_plate_qpcr(basic_plate)   # create full 384 well plate full_plate <- label_plate_rowcol(create_blank_plate(),                                    create_rowkey_8_in_16_plain(target_id = c(\"T_1\", \"T_2\",                                                                             \"T_3\", \"T_4\",                                                                              \"T_5\", \"T_6\",                                                                             \"T_7\", \"T_8\")),                                    create_colkey_6diln_2ctrl_in_24() %>%                                        dplyr::mutate(sample_id = paste0(dilution_nice,                                                                        \"_\",                                                                        tech_rep)))  # display full plate display_plate_qpcr(full_plate)"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/display_plate_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the value of each well across the plate. — display_plate_value","title":"Display the value of each well across the plate. — display_plate_value","text":"Plots plate well coloured value. Example values Cq, Delta Cq Delta Delta Cq.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/display_plate_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the value of each well across the plate. — display_plate_value","text":"","code":"display_plate_value(plate, value = \"cq\")"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/display_plate_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the value of each well across the plate. — display_plate_value","text":"plate tibble variables well_col, well_row, variable plotted. value character vector selecting variable plate plot well value","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/display_plate_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display the value of each well across the plate. — display_plate_value","text":"ggplot object; major output plot ","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/display_plate_value.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Display the value of each well across the plate. — display_plate_value","text":"specific example see calibration vignette: vignette(\"calibration_vignette\", package = \"tidyqpcr\")","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/display_plate_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display the value of each well across the plate. — display_plate_value","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(ggplot2)  # create 96 well plate with random values plate_randomcq <- create_blank_plate_96well() %>%     mutate(cq = runif(96) * 10,            deltacq = runif(96) * 2)   # display well Cq value across plate display_plate_value(plate_randomcq)   # display well Delta Cq value across plate with red colour pallette display_plate_value(plate_randomcq, value = \"deltacq\") +   # uses ggplot syntax     scale_fill_gradient(high = \"#FF0000\")"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/label_plate_rowcol.html","id":null,"dir":"Reference","previous_headings":"","what":"Label a plate with sample and probe information — label_plate_rowcol","title":"Label a plate with sample and probe information — label_plate_rowcol","text":"help, examples explanations, see plate setup vignette: vignette(\"platesetup_vignette\", package = \"tidyqpcr\")","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/label_plate_rowcol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label a plate with sample and probe information — label_plate_rowcol","text":"","code":"label_plate_rowcol(plate, rowkey = NULL, colkey = NULL, coercefactors = TRUE)"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/label_plate_rowcol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label a plate with sample and probe information — label_plate_rowcol","text":"plate tibble (data frame) variables well_row, well_col, well. usually produced create_blank_plate(). possible include information additional variables. rowkey tibble (data frame) describing plate rows, variables well_row others. colkey tibble (data frame) describing plate columns, variables well_col others. coercefactors TRUE, coerce well_row rowkey well_col colkey factors","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/label_plate_rowcol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label a plate with sample and probe information — label_plate_rowcol","text":"tibble (data frame) variables well_row, well_col, well,   others. tibble contains combinations well_row well_col found   input plate, information supplied rowkey colkey distributed   across every well plate. Return plate ordered row well_row   column well_col. Note ordering may cause problem well_col supplied   character (1,10,11,...), instead factor integer (1,2,3,...).   reason, function default converts well_row `rowkey`,   well_col `colkey`, factors, taking factor levels `plate`,   messages user. `plate$well_col` `plate$well_row` factors coercefactors = TRUE    label_plate_rowcol automatically convert factors, output    warning telling users may lead unexpected behaviour. tidyqpcr functions require plate plans contain variables   sample_id, target_id, prep_type, `label_plate_rowcol` message   missing. message, error,   variables can added users later.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/label_plate_rowcol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Label a plate with sample and probe information — label_plate_rowcol","text":"worked examples tidyqpcr analysis 384-well plates, see: vignette(\"calibration_vignette\", package = \"tidyqpcr\")","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/label_plate_rowcol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label a plate with sample and probe information — label_plate_rowcol","text":"","code":"label_plate_rowcol(plate = create_blank_plate()) # returns blank plate #> plate does not contain variable sample_id #> plate does not have variable target_id #> plate does not have variable prep_type #> # A tibble: 384 × 3 #>    well  well_row well_col #>    <chr> <fct>    <fct>    #>  1 A1    A        1        #>  2 A2    A        2        #>  3 A3    A        3        #>  4 A4    A        4        #>  5 A5    A        5        #>  6 A6    A        6        #>  7 A7    A        7        #>  8 A8    A        8        #>  9 A9    A        9        #> 10 A10   A        10       #> # ℹ 374 more rows  # label blank 96-well plate with empty edge wells  label_plate_rowcol(plate = create_blank_plate(well_row = LETTERS[2:7],                                                well_col = 2:11)) #> plate does not contain variable sample_id #> plate does not have variable target_id #> plate does not have variable prep_type #> # A tibble: 60 × 3 #>    well  well_row well_col #>    <chr> <fct>    <fct>    #>  1 B2    B        2        #>  2 B3    B        3        #>  3 B4    B        4        #>  4 B5    B        5        #>  5 B6    B        6        #>  6 B7    B        7        #>  7 B8    B        8        #>  8 B9    B        9        #>  9 B10   B        10       #> 10 B11   B        11       #> # ℹ 50 more rows  # label 96-well plate with sample id in rows  label_plate_rowcol(plate = create_blank_plate(well_row = LETTERS[1:8],                                               well_col = 1:12),                    rowkey = tibble(well_row = LETTERS[1:8],                                    sample_id = paste0(\"S_\",1:8))) #> coercing well_row to a factor with levels from plate$well_row #> plate does not have variable target_id #> plate does not have variable prep_type #> # A tibble: 96 × 4 #>    well  well_row well_col sample_id #>    <chr> <fct>    <fct>    <chr>     #>  1 A1    A        1        S_1       #>  2 A2    A        2        S_1       #>  3 A3    A        3        S_1       #>  4 A4    A        4        S_1       #>  5 A5    A        5        S_1       #>  6 A6    A        6        S_1       #>  7 A7    A        7        S_1       #>  8 A8    A        8        S_1       #>  9 A9    A        9        S_1       #> 10 A10   A        10       S_1       #> # ℹ 86 more rows  # label fraction of 96-well plate with target id in columns  label_plate_rowcol(plate = create_blank_plate(well_row = LETTERS[1:8],                                               well_col = 1:4),                    colkey = tibble(well_col = 1:4,                                    target_id = paste0(\"T_\",1:4))) #> coercing well_col to a factor with levels from plate$well_col #> plate does not contain variable sample_id #> plate does not have variable prep_type #> # A tibble: 32 × 4 #>    well  well_row well_col target_id #>    <chr> <fct>    <fct>    <chr>     #>  1 A1    A        1        T_1       #>  2 A2    A        2        T_2       #>  3 A3    A        3        T_3       #>  4 A4    A        4        T_4       #>  5 B1    B        1        T_1       #>  6 B2    B        2        T_2       #>  7 B3    B        3        T_3       #>  8 B4    B        4        T_4       #>  9 C1    C        1        T_1       #> 10 C2    C        2        T_2       #> # ℹ 22 more rows"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/make_row_names_echo1536.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates row names for the Labcyte Echo 1536-well plates — make_row_names_echo1536","title":"Generates row names for the Labcyte Echo 1536-well plates — make_row_names_echo1536","text":"Creates vector containing 36 row names according  labelling system used Labcyte Echo","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/make_row_names_echo1536.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates row names for the Labcyte Echo 1536-well plates — make_row_names_echo1536","text":"","code":"make_row_names_echo1536()"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/make_row_names_echo1536.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates row names for the Labcyte Echo 1536-well plates — make_row_names_echo1536","text":"Vector row names: ,B,...,Z,AA,AB,...,AF.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/make_row_names_echo1536.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates row names for the Labcyte Echo 1536-well plates — make_row_names_echo1536","text":"","code":"make_row_names_echo1536() #>  [1] \"A\"  \"B\"  \"C\"  \"D\"  \"E\"  \"F\"  \"G\"  \"H\"  \"I\"  \"J\"  \"K\"  \"L\"  \"M\"  \"N\"  \"O\"  #> [16] \"P\"  \"Q\"  \"R\"  \"S\"  \"T\"  \"U\"  \"V\"  \"W\"  \"X\"  \"Y\"  \"Z\"  \"AA\" \"AB\" \"AC\" \"AD\" #> [31] \"AE\" \"AF\""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/make_row_names_lc1536.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates row names for the Roche Lightcycler (tm) 1536-well plates — make_row_names_lc1536","title":"Generates row names for the Roche Lightcycler (tm) 1536-well plates — make_row_names_lc1536","text":"Creates vector containing 36 row names according labelling system  used Roche Lightcycler (tm)","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/make_row_names_lc1536.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates row names for the Roche Lightcycler (tm) 1536-well plates — make_row_names_lc1536","text":"","code":"make_row_names_lc1536()"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/make_row_names_lc1536.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates row names for the Roche Lightcycler (tm) 1536-well plates — make_row_names_lc1536","text":"Vector row names: Aa,Ab,Ac,Ad,Ba,...,Hd.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/make_row_names_lc1536.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generates row names for the Roche Lightcycler (tm) 1536-well plates — make_row_names_lc1536","text":"","code":"make_row_names_lc1536() #>  [1] \"Aa\" \"Ab\" \"Ac\" \"Ad\" \"Ba\" \"Bb\" \"Bc\" \"Bd\" \"Ca\" \"Cb\" \"Cc\" \"Cd\" \"Da\" \"Db\" \"Dc\" #> [16] \"Dd\" \"Ea\" \"Eb\" \"Ec\" \"Ed\" \"Fa\" \"Fb\" \"Fc\" \"Fd\" \"Ga\" \"Gb\" \"Gc\" \"Gd\" \"Ha\" \"Hb\" #> [31] \"Hc\" \"Hd\""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/read_lightcycler_1colour_cq.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads quantification cycle (cq) data in 1 colour from Roche Lightcyclers — read_lightcycler_1colour_cq","title":"Reads quantification cycle (cq) data in 1 colour from Roche Lightcyclers — read_lightcycler_1colour_cq","text":"data \"export text format\" analysis tab Lightcycler software. software calls cq, \"Cp\".","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/read_lightcycler_1colour_cq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads quantification cycle (cq) data in 1 colour from Roche Lightcyclers — read_lightcycler_1colour_cq","text":"","code":"read_lightcycler_1colour_cq(   filename,   skip = 2,   col_names = c(\"include\", \"color\", \"well\", \"sample_info\", \"cq\", \"concentration\",     \"standard\", \"status\"),   col_types = \"liccddil\",   ... )"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/read_lightcycler_1colour_cq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads quantification cycle (cq) data in 1 colour from Roche Lightcyclers — read_lightcycler_1colour_cq","text":"filename file name skip number lines skip, defaults 2 col_names names give columns col_types data types columns ... arguments pass read_tsv, needed","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/read_lightcycler_1colour_cq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads quantification cycle (cq) data in 1 colour from Roche Lightcyclers — read_lightcycler_1colour_cq","text":"tibble containing cq data","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/read_lightcycler_1colour_cq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reads quantification cycle (cq) data in 1 colour from Roche Lightcyclers — read_lightcycler_1colour_cq","text":"function thin wrapper around readr::read_tsv.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/read_lightcycler_1colour_cq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads quantification cycle (cq) data in 1 colour from Roche Lightcyclers — read_lightcycler_1colour_cq","text":"","code":"read_lightcycler_1colour_cq(system.file(\"extdata/Edward_qPCR_Nrd1_calibration_2019-02-02_Cq.txt.gz\",                                                   package = \"tidyqpcr\")) #> # A tibble: 384 × 8 #>    include color well  sample_info    cq concentration standard status #>    <lgl>   <int> <chr> <chr>       <dbl>         <dbl>    <int> <lgl>  #>  1 TRUE      255 A1    Sample 1     22.8            NA        0 NA     #>  2 TRUE      255 A2    Sample 2     24.7            NA        0 NA     #>  3 TRUE      255 A3    Sample 3     26.8            NA        0 NA     #>  4 TRUE      255 A4    Sample 4     28.6            NA        0 NA     #>  5 TRUE    65280 A5    Sample 5     NA              NA        0 NA     #>  6 TRUE    65280 A6    Sample 6     NA              NA        0 NA     #>  7 TRUE      255 A7    Sample 7     23.2            NA        0 NA     #>  8 TRUE      255 A8    Sample 8     24.8            NA        0 NA     #>  9 TRUE      255 A9    Sample 9     26.9            NA        0 NA     #> 10 TRUE    65280 A10   Sample 10    NA              NA        0 NA     #> # ℹ 374 more rows"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/read_lightcycler_1colour_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads raw text-format fluorescence data in 1 colour from Roche Lightcyclers — read_lightcycler_1colour_raw","title":"Reads raw text-format fluorescence data in 1 colour from Roche Lightcyclers — read_lightcycler_1colour_raw","text":"data \"export text format\" Lightcycler software. data format, .ixo, can converted .txt format Lightcycler software.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/read_lightcycler_1colour_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads raw text-format fluorescence data in 1 colour from Roche Lightcyclers — read_lightcycler_1colour_raw","text":"","code":"read_lightcycler_1colour_raw(   filename,   skip = 2,   col_names = c(\"well\", \"sample_info\", \"program_no\", \"segment_no\", \"cycle\", \"time\",     \"temperature\", \"fluor_raw\"),   col_types = \"ccffinnn\",   ... )"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/read_lightcycler_1colour_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads raw text-format fluorescence data in 1 colour from Roche Lightcyclers — read_lightcycler_1colour_raw","text":"filename file name skip number lines skip, defaults 2 col_names names give columns col_types data types columns ... arguments pass read_tsv, needed","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/read_lightcycler_1colour_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reads raw text-format fluorescence data in 1 colour from Roche Lightcyclers — read_lightcycler_1colour_raw","text":"tibble containing raw data, default column names: well: well plate, e.g. A1 sample_info: \"Sample\" field entered lightcycler software,   defaults \"Sample X\" program_no: number cycler program, 2-step PCR defaults 1   = melt, 2 = amplify, 3 = melt. segment_no: number segment cycler program, e.g.   hold/raise/lower temperature cycle: cycle number, programs repeated cycles (.e.   amplification) time: time fluorescence reading acquisition (units???) temperature: temperature block fluorescence acquisition fluor_raw: raw fluorescence reading \"arbitrary units\". SYBR safe,   483nm excitation, 533nm emission.","code":""},{"path":"https://docs.ropensci.org/tidyqpcr/reference/read_lightcycler_1colour_raw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reads raw text-format fluorescence data in 1 colour from Roche Lightcyclers — read_lightcycler_1colour_raw","text":"function thin wrapper around readr::read_tsv.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/read_lightcycler_1colour_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reads raw text-format fluorescence data in 1 colour from Roche Lightcyclers — read_lightcycler_1colour_raw","text":"","code":"read_lightcycler_1colour_raw(system.file(\"extdata/Edward_qPCR_Nrd1_calibration_2019-02-02.txt.gz\",                                                   package = \"tidyqpcr\")) #> # A tibble: 82,944 × 8 #>    well  sample_info program_no segment_no cycle   time temperature fluor_raw #>    <chr> <chr>       <fct>      <fct>      <int>  <dbl>       <dbl>     <dbl> #>  1 A1    Sample 1    2          2              1 234700        59.9      0.59 #>  2 A1    Sample 1    2          2              2 274117        59.8      0.57 #>  3 A1    Sample 1    2          2              3 313634        59.8      0.56 #>  4 A1    Sample 1    2          2              4 353100        59.8      0.56 #>  5 A1    Sample 1    2          2              5 392600        59.8      0.56 #>  6 A1    Sample 1    2          2              6 432234        59.8      0.56 #>  7 A1    Sample 1    2          2              7 471801        59.8      0.55 #>  8 A1    Sample 1    2          2              8 511334        59.8      0.55 #>  9 A1    Sample 1    2          2              9 550834        59.8      0.55 #> 10 A1    Sample 1    2          2             10 590417        59.8      0.54 #> # ℹ 82,934 more rows"},{"path":"https://docs.ropensci.org/tidyqpcr/reference/tidyqpcr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tidyqpcr: Quantitative PCR Analysis with the Tidyverse — tidyqpcr-package","title":"tidyqpcr: Quantitative PCR Analysis with the Tidyverse — tidyqpcr-package","text":"package reproducible quantitative PCR (qPCR) analysis using packages tidyverse, notably dplyr ggplot2. normalizes (ddCq), summarizes, plots pre-calculated Cq data, plots raw amplification melt curves Roche lightcycler machines. (yet) calculate Cq data amplification curves.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/tidyqpcr/reference/tidyqpcr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tidyqpcr: Quantitative PCR Analysis with the Tidyverse — tidyqpcr-package","text":"Maintainer: Edward Wallace Edward.Wallace@ed.ac.uk contributors: Sam Haynes samuel.haynes10@gmail.com [contributor]","code":""}]
